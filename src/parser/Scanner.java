// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: scaner.flex

/* JFlex example: partial Java language lexer specification */

package parser;
import java_cup.runtime.*;

import java.io.IOException;
import java.io.StringReader;

/**
 * This class is a simple example lexer.
 */
 

@SuppressWarnings("fallthrough")
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\1\u1f00\11\u2000\1\u2100\1\u2200\1\u2300\1\u2000"+
    "\1\u2400\1\u2500\2\u2000\31\u0100\1\u2600\126\u0100\1\u2700\1\u0100"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100\1\u2e00"+
    "\41\u2000\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100\1\u3a00"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u2000\1\u4e00\1\u4f00\1\u5000\1\u5100"+
    "\3\u0100\1\u5200\1\u5300\1\u5400\11\u2000\1\u5500\4\u0100\1\u5600"+
    "\17\u2000\2\u0100\1\u5700\41\u2000\2\u0100\1\u5800\1\u5900\2\u2000"+
    "\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00\41\u2000"+
    "\1\u5f00\1\u0100\1\u6000\1\u6100\11\u2000\1\u6200\22\u2000\1\u6300"+
    "\1\u2000\1\u6400\1\u6500\1\u2000\1\u6600\1\u6700\1\u6800\1\u6900"+
    "\2\u2000\1\u6a00\4\u2000\1\u6b00\1\u6c00\1\u6d00\1\u6e00\4\u2000"+
    "\1\u6f00\1\u7000\1\u7100\2\u2000\1\u7200\1\u2000\1\u7300\14\u2000"+
    "\1\u7400\4\u2000\246\u0100\1\u7500\20\u0100\1\u7600\1\u7700\25\u0100"+
    "\1\u7800\34\u0100\1\u7900\14\u2000\2\u0100\1\u7a00\5\u2000\23\u0100"+
    "\1\u7b00\u0aec\u2000\1\u7c00\1\u7d00\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\2\1\1\2\2\1\16\0\4\2\1\1\1\2"+
    "\1\3\1\2\1\4\1\2\1\5\1\3\1\6\1\7"+
    "\1\10\2\2\1\11\1\12\1\13\12\0\1\14\1\2"+
    "\1\15\1\16\1\17\2\2\5\4\1\20\1\21\15\4"+
    "\1\22\2\4\1\23\2\4\1\24\1\2\1\25\1\2"+
    "\1\4\1\2\1\26\1\27\1\4\1\30\1\31\1\32"+
    "\1\33\1\4\1\34\2\4\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\4\1\6\1\53\1\7\1\2\41\0"+
    "\2\2\4\4\4\2\1\4\1\2\1\54\1\0\7\2"+
    "\1\4\4\2\1\4\5\2\27\4\1\2\37\4\1\2"+
    "\u01ca\4\4\2\14\4\16\2\5\4\7\2\1\4\1\2"+
    "\1\4\21\2\160\0\5\4\1\2\2\4\2\2\4\4"+
    "\1\2\1\4\6\2\1\4\1\2\3\4\1\2\1\4"+
    "\1\2\24\4\1\2\123\4\1\2\213\4\1\2\5\0"+
    "\2\2\246\4\1\2\46\4\2\2\1\4\6\2\51\4"+
    "\6\2\1\4\1\2\55\0\1\2\1\0\1\2\2\0"+
    "\1\2\2\0\1\2\1\0\10\2\33\4\4\2\4\4"+
    "\15\2\6\0\5\2\1\4\4\2\13\0\1\2\1\0"+
    "\3\2\53\4\37\0\4\2\2\4\1\0\143\4\1\2"+
    "\1\4\10\0\1\2\6\0\2\4\2\0\1\2\4\0"+
    "\2\4\12\0\3\4\2\2\1\4\17\2\1\0\1\4"+
    "\1\0\36\4\33\0\2\2\131\4\13\0\1\4\16\2"+
    "\12\0\41\4\11\0\2\4\4\2\1\4\2\2\1\0"+
    "\30\4\4\0\1\4\11\0\1\4\3\0\1\4\5\0"+
    "\22\2\31\4\3\0\4\2\13\4\5\2\30\4\1\2"+
    "\6\4\1\2\2\0\6\2\10\0\52\4\72\0\66\4"+
    "\3\0\1\4\22\0\1\4\7\0\12\4\2\0\2\2"+
    "\12\0\1\2\20\4\3\0\1\2\10\4\2\2\2\4"+
    "\2\2\26\4\1\2\7\4\1\2\1\4\3\2\4\4"+
    "\2\2\1\0\1\4\7\0\2\2\2\0\2\2\3\0"+
    "\1\4\10\2\1\0\4\2\2\4\1\2\3\4\2\0"+
    "\2\2\12\0\4\4\7\2\2\4\1\2\1\0\2\2"+
    "\3\0\1\2\6\4\4\2\2\4\2\2\26\4\1\2"+
    "\7\4\1\2\2\4\1\2\2\4\1\2\2\4\2\2"+
    "\1\0\1\2\5\0\4\2\2\0\2\2\3\0\3\2"+
    "\1\0\7\2\4\4\1\2\1\4\7\2\14\0\3\4"+
    "\1\0\13\2\3\0\1\2\11\4\1\2\3\4\1\2"+
    "\26\4\1\2\7\4\1\2\2\4\1\2\5\4\2\2"+
    "\1\0\1\4\10\0\1\2\3\0\1\2\3\0\2\2"+
    "\1\4\17\2\2\4\2\0\2\2\12\0\1\2\1\4"+
    "\7\2\1\4\6\0\1\2\3\0\1\2\10\4\2\2"+
    "\2\4\2\2\26\4\1\2\7\4\1\2\2\4\1\2"+
    "\5\4\2\2\1\0\1\4\7\0\2\2\2\0\2\2"+
    "\3\0\7\2\3\0\4\2\2\4\1\2\3\4\2\0"+
    "\2\2\12\0\1\2\1\4\20\2\1\0\1\4\1\2"+
    "\6\4\3\2\3\4\1\2\4\4\3\2\2\4\1\2"+
    "\1\4\1\2\2\4\3\2\2\4\3\2\3\4\3\2"+
    "\14\4\4\2\5\0\3\2\3\0\1\2\4\0\2\2"+
    "\1\4\6\2\1\0\16\2\12\0\11\2\1\4\6\2"+
    "\5\0\10\4\1\2\3\4\1\2\27\4\1\2\20\4"+
    "\2\2\1\0\1\4\7\0\1\2\3\0\1\2\4\0"+
    "\7\2\2\0\1\2\3\4\2\2\1\4\2\2\2\4"+
    "\2\0\2\2\12\0\20\2\1\4\3\0\1\2\10\4"+
    "\1\2\3\4\1\2\27\4\1\2\12\4\1\2\5\4"+
    "\2\2\1\0\1\4\7\0\1\2\3\0\1\2\4\0"+
    "\7\2\2\0\6\2\2\4\1\2\2\4\2\0\2\2"+
    "\12\0\1\2\2\4\15\2\4\0\11\4\1\2\3\4"+
    "\1\2\51\4\2\0\1\4\7\0\1\2\3\0\1\2"+
    "\4\0\1\4\5\2\3\4\1\0\7\2\3\4\2\0"+
    "\2\2\12\0\12\2\6\4\1\2\3\0\1\2\22\4"+
    "\3\2\30\4\1\2\11\4\1\2\1\4\2\2\7\4"+
    "\3\2\1\0\4\2\6\0\1\2\1\0\1\2\10\0"+
    "\6\2\12\0\2\2\2\0\15\2\60\4\1\0\2\4"+
    "\7\0\4\2\10\4\10\0\1\2\12\0\47\2\2\4"+
    "\1\2\1\4\1\2\5\4\1\2\30\4\1\2\1\4"+
    "\1\2\12\4\1\0\2\4\11\0\1\4\2\2\5\4"+
    "\1\2\1\4\1\2\6\0\2\2\12\0\2\2\4\4"+
    "\40\2\1\4\27\2\2\0\6\2\12\0\13\2\1\0"+
    "\1\2\1\0\1\2\1\0\4\2\2\0\10\4\1\2"+
    "\44\4\4\2\24\0\1\2\2\0\5\4\13\0\1\2"+
    "\44\0\11\2\1\0\71\2\53\4\24\0\1\4\12\0"+
    "\6\2\6\4\4\0\4\4\3\0\1\4\3\0\2\4"+
    "\7\0\3\4\4\0\15\4\14\0\1\4\17\0\2\2"+
    "\46\4\1\2\1\4\5\2\1\4\2\2\53\4\1\2"+
    "\115\4\1\2\4\4\2\2\7\4\1\2\1\4\1\2"+
    "\4\4\2\2\51\4\1\2\4\4\2\2\41\4\1\2"+
    "\4\4\2\2\7\4\1\2\1\4\1\2\4\4\2\2"+
    "\17\4\1\2\71\4\1\2\4\4\2\2\103\4\2\2"+
    "\3\0\40\2\20\4\20\2\126\4\2\2\6\4\3\2"+
    "\u016c\4\2\2\21\4\1\2\32\4\5\2\113\4\3\2"+
    "\13\4\7\2\22\4\4\0\11\2\23\4\3\0\13\2"+
    "\22\4\2\0\14\2\15\4\1\2\3\4\1\2\2\0"+
    "\14\2\64\4\40\0\3\2\1\4\3\2\2\4\1\0"+
    "\2\2\12\0\41\2\17\0\6\2\131\4\7\2\5\4"+
    "\2\0\42\4\1\0\1\4\5\2\106\4\12\2\37\4"+
    "\1\2\14\0\4\2\14\0\12\2\12\0\36\4\2\2"+
    "\5\4\13\2\54\4\4\2\32\4\6\2\12\0\46\2"+
    "\27\4\5\0\4\2\65\4\12\0\1\2\35\0\2\2"+
    "\13\0\6\2\12\0\15\2\1\4\10\2\16\0\1\2"+
    "\20\0\61\2\5\0\57\4\21\0\10\4\3\2\12\0"+
    "\21\2\11\0\14\2\3\0\36\4\15\0\2\4\12\0"+
    "\54\4\16\0\14\2\44\4\24\0\10\2\12\0\3\2"+
    "\3\4\12\0\44\4\2\2\11\4\7\2\53\4\2\2"+
    "\3\4\20\2\3\0\1\2\25\0\4\4\1\0\6\4"+
    "\1\0\2\4\3\0\1\4\5\2\300\4\100\0\26\4"+
    "\2\2\6\4\2\2\46\4\2\2\6\4\2\2\10\4"+
    "\1\2\1\4\1\2\1\4\1\2\1\4\1\2\37\4"+
    "\2\2\65\4\1\2\7\4\1\2\1\4\3\2\3\4"+
    "\1\2\7\4\3\2\4\4\2\2\6\4\4\2\15\4"+
    "\5\2\3\4\1\2\7\4\16\2\5\0\32\2\5\0"+
    "\20\2\2\4\23\2\1\4\13\2\5\0\1\2\12\0"+
    "\1\2\1\4\15\2\1\4\20\2\15\4\3\2\41\4"+
    "\17\2\15\0\4\2\1\0\3\2\14\0\21\2\1\4"+
    "\4\2\1\4\2\2\12\4\1\2\1\4\3\2\5\4"+
    "\6\2\1\4\1\2\1\4\1\2\1\4\1\2\4\4"+
    "\1\2\13\4\2\2\4\4\5\2\5\4\4\2\1\4"+
    "\21\2\51\4\220\2\1\12\53\2\1\55\133\2\1\56"+
    "\2\2\1\57\1\60\16\2\1\61\13\2\1\62\1\63"+
    "\u013e\2\345\4\6\2\4\4\3\0\2\4\14\2\46\4"+
    "\1\2\1\4\5\2\1\4\2\2\70\4\7\2\1\4"+
    "\17\2\1\0\27\4\11\2\7\4\1\2\7\4\1\2"+
    "\7\4\1\2\7\4\1\2\7\4\1\2\7\4\1\2"+
    "\7\4\1\2\7\4\1\2\40\0\57\2\1\4\325\2"+
    "\3\4\31\2\11\4\6\0\1\2\5\4\2\2\5\4"+
    "\4\2\126\4\2\2\2\0\2\2\3\4\1\2\132\4"+
    "\1\2\4\4\5\2\53\4\1\2\136\4\21\2\40\4"+
    "\60\2\320\4\100\2\215\4\103\2\56\4\2\2\15\4"+
    "\3\2\20\4\12\0\2\4\24\2\57\4\1\0\4\2"+
    "\12\0\1\2\37\4\2\0\120\4\2\0\45\2\11\4"+
    "\2\2\147\4\2\2\100\4\5\2\2\4\1\2\1\4"+
    "\1\2\5\4\30\2\20\4\1\0\3\4\1\0\4\4"+
    "\1\0\27\4\5\0\4\2\1\0\13\2\1\4\7\2"+
    "\64\4\14\2\2\0\62\4\22\0\12\2\12\0\6\2"+
    "\22\0\6\4\3\2\1\4\1\2\2\4\13\0\34\4"+
    "\10\0\2\2\27\4\15\0\14\2\35\4\3\2\4\0"+
    "\57\4\16\0\16\2\1\4\12\0\6\2\5\4\1\0"+
    "\12\4\12\0\5\4\1\2\51\4\16\0\11\2\3\4"+
    "\1\0\10\4\2\0\2\2\12\0\6\2\27\4\3\2"+
    "\1\4\3\0\62\4\1\0\1\4\3\0\2\4\2\0"+
    "\5\4\2\0\1\4\1\0\1\4\30\2\3\4\2\2"+
    "\13\4\5\0\2\2\3\4\2\0\12\2\6\4\2\2"+
    "\6\4\2\2\6\4\11\2\7\4\1\2\7\4\1\2"+
    "\53\4\1\2\16\4\6\2\163\4\10\0\1\2\2\0"+
    "\2\2\12\0\6\2\244\4\14\2\27\4\4\2\61\4"+
    "\4\2\156\4\2\2\152\4\46\2\7\4\14\2\5\4"+
    "\5\2\1\4\1\0\12\4\1\2\15\4\1\2\5\4"+
    "\1\2\1\4\1\2\2\4\1\2\2\4\1\2\154\4"+
    "\41\2\153\4\22\2\100\4\2\2\66\4\50\2\15\4"+
    "\3\2\20\0\20\2\20\0\3\2\2\4\30\2\3\4"+
    "\31\2\1\4\6\2\5\4\1\2\207\4\2\2\1\0"+
    "\4\2\1\4\13\2\12\0\7\2\32\4\4\2\1\4"+
    "\1\2\32\4\13\2\131\4\3\2\6\4\2\2\6\4"+
    "\2\2\6\4\2\2\3\4\3\2\2\4\3\2\2\4"+
    "\22\2\3\0\4\2\14\4\1\2\32\4\1\2\23\4"+
    "\1\2\2\4\1\2\17\4\2\2\16\4\42\2\173\4"+
    "\105\2\65\4\210\2\1\0\202\2\35\4\3\2\61\4"+
    "\17\2\1\0\37\2\40\4\15\2\36\4\5\2\46\4"+
    "\5\0\5\2\36\4\2\2\44\4\4\2\10\4\1\2"+
    "\5\4\52\2\236\4\2\2\12\0\6\2\44\4\4\2"+
    "\44\4\4\2\50\4\10\2\64\4\14\2\13\4\1\2"+
    "\17\4\1\2\7\4\1\2\2\4\1\2\13\4\1\2"+
    "\17\4\1\2\7\4\1\2\2\4\103\2\67\4\11\2"+
    "\26\4\12\2\10\4\30\2\6\4\1\2\52\4\1\2"+
    "\11\4\105\2\6\4\2\2\1\4\1\2\54\4\1\2"+
    "\2\4\3\2\1\4\2\2\27\4\12\2\27\4\11\2"+
    "\37\4\101\2\23\4\1\2\2\4\12\2\26\4\12\2"+
    "\32\4\106\2\70\4\6\2\2\4\100\2\1\4\3\0"+
    "\1\2\2\0\5\2\4\0\4\4\1\2\3\4\1\2"+
    "\35\4\2\2\3\0\4\2\1\0\40\2\35\4\3\2"+
    "\35\4\43\2\10\4\1\2\34\4\2\0\31\2\66\4"+
    "\12\2\26\4\12\2\23\4\15\2\22\4\156\2\111\4"+
    "\67\2\63\4\15\2\63\4\15\2\44\4\4\0\10\2"+
    "\12\0\u0146\2\52\4\1\2\2\0\3\2\2\4\116\2"+
    "\35\4\12\2\1\4\10\2\26\4\13\0\37\2\22\4"+
    "\4\0\52\2\25\4\33\2\27\4\11\2\3\0\65\4"+
    "\17\0\37\2\13\0\2\4\2\0\1\4\11\2\4\0"+
    "\55\4\13\0\2\2\1\0\4\2\1\0\12\2\1\0"+
    "\2\2\31\4\7\2\12\0\6\2\3\0\44\4\16\0"+
    "\1\2\12\0\4\2\1\4\2\0\1\4\10\2\43\4"+
    "\1\0\2\2\1\4\11\2\3\0\60\4\16\0\4\4"+
    "\4\2\4\0\1\2\14\0\1\4\1\2\1\4\43\2"+
    "\22\4\1\2\31\4\14\0\6\2\1\0\101\2\7\4"+
    "\1\2\1\4\1\2\4\4\1\2\17\4\1\2\12\4"+
    "\7\2\57\4\14\0\5\2\12\0\6\2\4\0\1\2"+
    "\10\4\2\2\2\4\2\2\26\4\1\2\7\4\1\2"+
    "\2\4\1\2\5\4\1\2\2\0\1\4\7\0\2\2"+
    "\2\0\2\2\3\0\2\2\1\4\6\2\1\0\5\2"+
    "\5\4\2\0\2\2\7\0\3\2\5\0\213\2\65\4"+
    "\22\0\4\4\5\2\12\0\4\2\1\0\3\4\36\2"+
    "\60\4\24\0\2\4\1\2\1\4\10\2\12\0\246\2"+
    "\57\4\7\0\2\2\11\0\27\2\4\4\2\0\42\2"+
    "\60\4\21\0\3\2\1\4\13\2\12\0\46\2\53\4"+
    "\15\0\1\4\7\2\12\0\66\2\33\4\2\2\17\0"+
    "\4\2\12\0\6\2\7\4\271\2\54\4\17\0\145\2"+
    "\100\4\12\0\25\2\10\4\2\2\1\4\2\2\10\4"+
    "\1\2\2\4\1\2\30\4\6\0\1\2\2\0\2\2"+
    "\4\0\1\4\1\0\1\4\2\0\14\2\12\0\106\2"+
    "\10\4\2\2\47\4\7\0\2\2\7\0\1\4\1\2"+
    "\1\4\1\0\33\2\1\4\12\0\50\4\7\0\1\4"+
    "\4\0\10\2\1\0\10\2\1\4\13\0\56\4\20\0"+
    "\3\2\1\4\22\2\111\4\7\2\11\4\1\2\45\4"+
    "\10\0\1\2\10\0\1\4\17\2\12\0\30\2\36\4"+
    "\2\2\26\0\1\2\16\0\111\2\7\4\1\2\2\4"+
    "\1\2\46\4\6\0\3\2\1\0\1\2\2\0\1\2"+
    "\7\0\1\4\1\0\10\2\12\0\6\2\6\4\1\2"+
    "\2\4\1\2\40\4\5\0\1\2\2\0\1\2\5\0"+
    "\1\4\7\2\12\0\u0136\2\23\4\4\0\271\2\1\4"+
    "\54\2\4\4\37\2\232\4\146\2\157\4\21\2\304\4"+
    "\u014c\2\141\4\17\2\57\4\1\2\11\0\307\2\107\4"+
    "\271\2\71\4\7\2\37\4\1\2\12\0\6\2\117\4"+
    "\1\2\12\0\6\2\36\4\2\2\5\0\13\2\60\4"+
    "\7\0\11\2\4\4\14\2\12\0\11\2\25\4\5\2"+
    "\23\4\260\2\100\4\200\2\113\4\4\2\1\0\1\4"+
    "\67\0\7\2\4\0\15\4\100\2\2\4\1\2\1\4"+
    "\1\0\13\2\2\0\16\2\370\4\10\2\326\4\52\2"+
    "\11\4\u01e7\2\4\4\1\2\7\4\1\2\2\4\1\2"+
    "\43\4\55\2\3\4\21\2\4\4\10\2\u018c\4\4\2"+
    "\153\4\5\2\15\4\3\2\11\4\7\2\12\4\3\2"+
    "\2\0\1\2\4\0\134\2\56\0\2\2\27\0\u011e\2"+
    "\5\0\3\2\26\0\2\2\7\0\36\2\4\0\224\2"+
    "\3\0\273\2\125\4\1\2\107\4\1\2\2\4\2\2"+
    "\1\4\2\2\2\4\2\2\4\4\1\2\14\4\1\2"+
    "\1\4\1\2\7\4\1\2\101\4\1\2\4\4\2\2"+
    "\10\4\1\2\7\4\1\2\34\4\1\2\4\4\1\2"+
    "\5\4\1\2\1\4\3\2\7\4\1\2\u0154\4\2\2"+
    "\31\4\1\2\31\4\1\2\37\4\1\2\31\4\1\2"+
    "\37\4\1\2\31\4\1\2\37\4\1\2\31\4\1\2"+
    "\37\4\1\2\31\4\1\2\10\4\2\2\151\0\4\2"+
    "\62\0\10\2\1\0\16\2\1\0\26\2\5\0\1\2"+
    "\17\0\120\2\37\4\341\2\7\0\1\2\21\0\2\2"+
    "\7\0\1\2\2\0\1\2\5\0\325\2\55\4\3\2"+
    "\7\0\7\4\2\2\12\0\4\2\1\4\u0141\2\36\4"+
    "\1\0\21\2\54\4\16\0\5\2\1\4\340\2\7\4"+
    "\1\2\4\4\1\2\2\4\1\2\17\4\1\2\305\4"+
    "\13\2\7\0\51\2\104\4\7\0\1\4\4\2\12\0"+
    "\u0156\2\1\4\117\2\4\4\1\2\33\4\1\2\2\4"+
    "\1\2\1\4\2\2\1\4\1\2\12\4\1\2\4\4"+
    "\1\2\1\4\1\2\1\4\6\2\1\4\4\2\1\4"+
    "\1\2\1\4\1\2\1\4\1\2\3\4\1\2\2\4"+
    "\1\2\1\4\2\2\1\4\1\2\1\4\1\2\1\4"+
    "\1\2\1\4\1\2\1\4\1\2\2\4\1\2\1\4"+
    "\2\2\4\4\1\2\7\4\1\2\4\4\1\2\4\4"+
    "\1\2\1\4\1\2\12\4\1\2\21\4\5\2\3\4"+
    "\1\2\5\4\1\2\21\4\u0134\2\12\0\6\2\340\4"+
    "\40\2\71\4\7\2\336\4\2\2\u0182\4\16\2\u0131\4"+
    "\37\2\36\4\342\2\113\4\266\2\1\0\36\2\140\0"+
    "\200\2\360\0\20\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32256];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\7\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\14\3\1\1\1\21\1\12"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\3\0\1\30"+
    "\14\3\1\27\4\3\1\31\1\0\1\32\2\3\1\26"+
    "\1\3\1\7\2\3\1\32\3\3\1\21\4\3\1\33"+
    "\7\3\1\16\2\3\1\23\5\3\1\24\1\3\1\6"+
    "\2\3\1\15\1\3\1\14\1\22\2\3\1\11\1\25"+
    "\1\3\1\30\2\3\1\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\64\0\150\0\234\0\320\0\64\0\64"+
    "\0\64\0\64\0\u0104\0\64\0\u0138\0\u016c\0\64\0\64"+
    "\0\64\0\64\0\64\0\64\0\u01a0\0\u01d4\0\u0208\0\u023c"+
    "\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc"+
    "\0\u0410\0\64\0\64\0\64\0\64\0\64\0\64\0\64"+
    "\0\64\0\u0444\0\u0478\0\u04ac\0\64\0\u04e0\0\u0514\0\u0548"+
    "\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8"+
    "\0\u071c\0\234\0\u0750\0\u0784\0\u07b8\0\u07ec\0\64\0\u0820"+
    "\0\64\0\u0854\0\u0888\0\234\0\u08bc\0\234\0\u08f0\0\u0924"+
    "\0\234\0\u0958\0\u098c\0\u09c0\0\234\0\u09f4\0\u0a28\0\u0a5c"+
    "\0\u0a90\0\64\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8"+
    "\0\u0bfc\0\234\0\u0c30\0\u0c64\0\234\0\u0c98\0\u0ccc\0\u0d00"+
    "\0\u0d34\0\u0d68\0\234\0\u0d9c\0\234\0\u0dd0\0\u0e04\0\234"+
    "\0\u0e38\0\234\0\234\0\u0e6c\0\u0ea0\0\234\0\234\0\u0ed4"+
    "\0\234\0\u0f08\0\u0f3c\0\234";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\15\1\16\1\2"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\5\1\32\1\5\1\33\1\34"+
    "\1\35\3\5\1\36\1\37\1\40\4\5\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\70\0"+
    "\1\52\13\0\4\52\2\0\25\52\11\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\25\5\16\0\1\50\66\0"+
    "\1\53\71\0\1\54\64\0\1\55\44\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\5\5\1\56\1\5\1\57"+
    "\1\5\1\60\13\5\11\0\1\5\3\0\1\5\13\0"+
    "\4\5\2\0\12\5\1\61\12\5\11\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\12\5\1\62\12\5\11\0"+
    "\1\5\3\0\1\5\13\0\4\5\2\0\21\5\1\63"+
    "\3\5\11\0\1\5\3\0\1\5\13\0\4\5\2\0"+
    "\1\64\24\5\11\0\1\5\3\0\1\5\13\0\4\5"+
    "\2\0\4\5\1\65\3\5\1\66\14\5\11\0\1\5"+
    "\3\0\1\5\13\0\4\5\2\0\6\5\1\67\16\5"+
    "\11\0\1\5\3\0\1\5\13\0\4\5\2\0\3\5"+
    "\1\70\6\5\1\71\12\5\11\0\1\5\3\0\1\5"+
    "\13\0\4\5\2\0\15\5\1\72\7\5\11\0\1\5"+
    "\3\0\1\5\13\0\4\5\2\0\14\5\1\73\10\5"+
    "\11\0\1\5\3\0\1\5\13\0\4\5\2\0\6\5"+
    "\1\74\6\5\1\75\7\5\11\0\1\5\3\0\1\5"+
    "\13\0\4\5\2\0\11\5\1\76\13\5\64\0\1\51"+
    "\10\0\1\52\2\0\1\77\1\52\13\0\4\52\2\0"+
    "\25\52\11\0\10\53\1\100\53\53\17\0\1\101\44\0"+
    "\1\5\3\0\1\5\13\0\4\5\2\0\3\5\1\102"+
    "\21\5\11\0\1\5\3\0\1\5\13\0\4\5\2\0"+
    "\22\5\1\103\2\5\11\0\1\5\3\0\1\5\13\0"+
    "\4\5\2\0\2\5\1\104\22\5\11\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\23\5\1\105\1\5\11\0"+
    "\1\5\3\0\1\5\13\0\4\5\2\0\17\5\1\106"+
    "\5\5\11\0\1\5\3\0\1\5\13\0\4\5\2\0"+
    "\3\5\1\107\21\5\11\0\1\5\3\0\1\5\13\0"+
    "\4\5\2\0\7\5\1\110\15\5\11\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\4\5\1\111\20\5\11\0"+
    "\1\5\3\0\1\5\13\0\4\5\2\0\13\5\1\112"+
    "\11\5\11\0\1\5\3\0\1\5\13\0\4\5\2\0"+
    "\11\5\1\113\13\5\11\0\1\5\3\0\1\5\13\0"+
    "\4\5\2\0\23\5\1\114\1\5\11\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\17\5\1\115\5\5\11\0"+
    "\1\5\3\0\1\5\13\0\4\5\2\0\20\5\1\116"+
    "\4\5\11\0\1\5\3\0\1\5\13\0\4\5\2\0"+
    "\10\5\1\117\14\5\11\0\1\5\3\0\1\5\13\0"+
    "\4\5\2\0\20\5\1\120\4\5\11\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\17\5\1\121\5\5\11\0"+
    "\10\53\1\100\2\53\1\122\50\53\1\5\3\0\1\5"+
    "\13\0\4\5\2\0\11\5\1\123\13\5\11\0\1\5"+
    "\3\0\1\5\13\0\4\5\2\0\1\124\24\5\11\0"+
    "\1\5\3\0\1\5\13\0\4\5\2\0\2\5\1\125"+
    "\22\5\11\0\1\5\3\0\1\5\13\0\4\5\2\0"+
    "\11\5\1\126\13\5\11\0\1\5\3\0\1\5\13\0"+
    "\4\5\2\0\16\5\1\127\6\5\11\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\7\5\1\130\15\5\11\0"+
    "\1\5\3\0\1\5\13\0\4\5\2\0\20\5\1\131"+
    "\4\5\11\0\1\5\3\0\1\5\13\0\4\5\2\0"+
    "\17\5\1\132\5\5\11\0\1\5\3\0\1\5\13\0"+
    "\4\5\2\0\1\133\24\5\11\0\1\5\3\0\1\5"+
    "\13\0\4\5\2\0\3\5\1\134\21\5\11\0\1\5"+
    "\3\0\1\5\13\0\4\5\2\0\3\5\1\135\21\5"+
    "\11\0\1\5\3\0\1\5\13\0\4\5\2\0\6\5"+
    "\1\136\16\5\11\0\1\5\3\0\1\5\13\0\4\5"+
    "\2\0\17\5\1\137\5\5\11\0\1\5\3\0\1\5"+
    "\13\0\4\5\2\0\24\5\1\140\11\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\12\5\1\141\12\5\11\0"+
    "\1\5\3\0\1\5\13\0\4\5\2\0\17\5\1\142"+
    "\5\5\11\0\1\5\3\0\1\5\13\0\4\5\2\0"+
    "\3\5\1\143\21\5\11\0\1\5\3\0\1\5\13\0"+
    "\4\5\2\0\6\5\1\144\16\5\11\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\16\5\1\145\6\5\11\0"+
    "\1\5\3\0\1\5\13\0\4\5\2\0\15\5\1\146"+
    "\7\5\11\0\1\5\3\0\1\5\13\0\4\5\2\0"+
    "\7\5\1\147\15\5\11\0\1\5\3\0\1\5\13\0"+
    "\4\5\2\0\7\5\1\150\15\5\11\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\7\5\1\151\15\5\11\0"+
    "\1\5\3\0\1\5\13\0\4\5\2\0\16\5\1\152"+
    "\6\5\11\0\1\5\3\0\1\5\13\0\4\5\2\0"+
    "\17\5\1\153\5\5\11\0\1\5\3\0\1\5\13\0"+
    "\4\5\2\0\20\5\1\154\4\5\11\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\3\5\1\155\21\5\11\0"+
    "\1\5\3\0\1\5\13\0\4\5\2\0\3\5\1\153"+
    "\21\5\11\0\1\5\3\0\1\5\13\0\4\5\2\0"+
    "\17\5\1\156\5\5\11\0\1\5\3\0\1\5\13\0"+
    "\4\5\2\0\17\5\1\157\5\5\11\0\1\5\3\0"+
    "\1\5\13\0\4\5\2\0\1\160\24\5\11\0\1\5"+
    "\3\0\1\5\13\0\4\5\2\0\16\5\1\161\6\5"+
    "\11\0\1\5\3\0\1\5\13\0\4\5\2\0\7\5"+
    "\1\162\15\5\11\0\1\5\3\0\1\5\13\0\4\5"+
    "\2\0\7\5\1\163\15\5\11\0\1\5\3\0\1\5"+
    "\13\0\4\5\2\0\24\5\1\164\11\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3952];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\4\11\1\1\1\11\2\1\6\11"+
    "\15\1\10\11\3\0\1\11\21\1\1\11\1\0\1\11"+
    "\20\1\1\11\42\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  void print(String s){
  	System.out.println(s);
  }
  
  private Symbol sym(int sym) {
    return new Symbol(sym);
  }

  private Symbol sym(int sym, Object val) {
    return new Symbol(sym, val);
  }
  
   public static void main(String[] args) {
	String s = "";

    Scanner scanner = new Scanner(new StringReader(s));
    while ( !scanner.zzAtEOF )
		try {
			scanner.next_token();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Lexical error: " + yytext());
            }
          // fall through
          case 28: break;
          case 2:
            { /*ignore*/
            }
          // fall through
          case 29: break;
          case 3:
            { return sym(sym.IDENTIFIER, yytext()); /*identifiers mustn't start with a letter which represents a time operator*/
            }
          // fall through
          case 30: break;
          case 4:
            { return sym(sym.LPAREN);
            }
          // fall through
          case 31: break;
          case 5:
            { return sym(sym.RPAREN);
            }
          // fall through
          case 32: break;
          case 6:
            { return sym(sym.MINUS);
            }
          // fall through
          case 33: break;
          case 7:
            { return sym(sym.DOT);
            }
          // fall through
          case 34: break;
          case 8:
            { return sym(sym.COLON);
            }
          // fall through
          case 35: break;
          case 9:
            { return sym(sym.LT);
            }
          // fall through
          case 36: break;
          case 10:
            { return sym(sym.EQ);
            }
          // fall through
          case 37: break;
          case 11:
            { return sym(sym.EVENTUALLY);
            }
          // fall through
          case 38: break;
          case 12:
            { return sym(sym.ALWAYS);
            }
          // fall through
          case 39: break;
          case 13:
            { return sym(sym.UNTIL);
            }
          // fall through
          case 40: break;
          case 14:
            { return sym(sym.NEXT);
            }
          // fall through
          case 41: break;
          case 15:
            { return sym(sym.LBRACK);
            }
          // fall through
          case 42: break;
          case 16:
            { return sym(sym.RBRACK);
            }
          // fall through
          case 43: break;
          case 17:
            { return sym(sym.NOT);
            }
          // fall through
          case 44: break;
          case 18:
            { return sym(sym.SQUARE);
            }
          // fall through
          case 45: break;
          case 19:
            { return sym(sym.TRUE);
            }
          // fall through
          case 46: break;
          case 20:
            { return sym(sym.FALSE);
            }
          // fall through
          case 47: break;
          case 21:
            { return sym(sym.AGENTLT);
            }
          // fall through
          case 48: break;
          case 22:
            { return sym(sym.AND);
            }
          // fall through
          case 49: break;
          case 23:
            { return sym(sym.OR);
            }
          // fall through
          case 50: break;
          case 24:
            { return sym(sym.IMPLIES);
            }
          // fall through
          case 51: break;
          case 25:
            { return sym(sym.IDENTIFIER, yytext());
            }
          // fall through
          case 52: break;
          case 26:
            { return sym(sym.IFF);
            }
          // fall through
          case 53: break;
          case 27:
            { /*ignore, comments don't nest*/
            }
          // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
