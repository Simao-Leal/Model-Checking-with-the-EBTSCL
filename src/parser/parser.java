
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import formulas.*;
import formulas.atemporal.*;
import formulas.LTL.*;
import formulas.propositional.*;
import symbols.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\003" +
    "\003\000\002\003\005\000\002\003\007\000\002\003\006" +
    "\000\002\003\010\000\002\003\003\000\002\003\003\000" +
    "\002\005\010\000\002\005\010\000\002\005\010\000\002" +
    "\005\010\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\006\005\000\002\006\006" +
    "\000\002\006\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\024\004\005\013\020\020\010\021\013\022" +
    "\004\023\006\024\011\026\021\032\017\001\002\000\024" +
    "\004\005\013\020\020\010\021\013\022\004\023\006\024" +
    "\011\026\021\032\017\001\002\000\006\026\113\032\112" +
    "\001\002\000\024\004\005\013\020\020\010\021\013\022" +
    "\004\023\006\024\011\026\021\032\017\001\002\000\020" +
    "\002\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\025\ufff2\027" +
    "\ufff2\001\002\000\020\002\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\025\uffff\027\uffff\001\002\000\024\004\005\013" +
    "\020\020\010\021\013\022\004\023\006\024\011\026\021" +
    "\032\017\001\002\000\024\002\uffed\006\104\010\105\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\025\uffed\027\uffed\001\002" +
    "\000\020\002\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\025" +
    "\ufffe\027\ufffe\001\002\000\016\002\103\014\026\015\023" +
    "\016\025\017\030\025\027\001\002\000\020\002\ufffc\014" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\025\ufffc\027\ufffc\001\002" +
    "\000\024\002\uffec\006\071\007\072\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\025\uffec\027\uffec\001\002\000\032\002\ufffd" +
    "\005\043\006\037\007\041\010\040\011\042\014\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\025\ufffd\027\ufffd\001\002\000\024" +
    "\004\005\013\020\020\010\021\013\022\004\023\006\024" +
    "\011\026\021\032\017\001\002\000\024\004\005\013\020" +
    "\020\010\021\013\022\004\023\006\024\011\026\021\032" +
    "\017\001\002\000\016\014\026\015\023\016\025\017\030" +
    "\025\027\027\024\001\002\000\024\004\005\013\020\020" +
    "\010\021\013\022\004\023\006\024\011\026\021\032\017" +
    "\001\002\000\020\002\000\014\000\015\000\016\000\017" +
    "\000\025\000\027\000\001\002\000\024\004\005\013\020" +
    "\020\010\021\013\022\004\023\006\024\011\026\021\032" +
    "\017\001\002\000\024\004\005\013\020\020\010\021\013" +
    "\022\004\023\006\024\011\026\021\032\017\001\002\000" +
    "\024\004\005\013\020\020\010\021\013\022\004\023\006" +
    "\024\011\026\021\032\017\001\002\000\024\004\005\013" +
    "\020\020\010\021\013\022\004\023\006\024\011\026\021" +
    "\032\017\001\002\000\020\002\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\025\ufff4\027\ufff4\001\002\000\020\002\ufff3" +
    "\014\026\015\023\016\025\017\030\025\ufff3\027\ufff3\001" +
    "\002\000\020\002\ufff7\014\ufff7\015\ufff7\016\025\017\030" +
    "\025\ufff7\027\ufff7\001\002\000\020\002\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\025\ufff5\027\ufff5\001\002\000\020" +
    "\002\ufff6\014\ufff6\015\ufff6\016\025\017\030\025\ufff6\027" +
    "\ufff6\001\002\000\020\002\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\025\ufffb\027\ufffb\001\002\000\006\030\064\032" +
    "\065\001\002\000\004\032\063\001\002\000\004\030\057" +
    "\001\002\000\012\004\005\012\046\026\050\032\047\001" +
    "\002\000\004\032\044\001\002\000\020\002\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\025\uffe3\027\uffe3\001\002\000" +
    "\020\002\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\025\ufff1" +
    "\027\ufff1\001\002\000\010\004\005\026\054\032\047\001" +
    "\002\000\004\005\043\001\002\000\006\004\005\032\047" +
    "\001\002\000\004\027\052\001\002\000\020\002\ufff0\014" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\025\ufff0\027\ufff0\001\002" +
    "\000\020\002\uffef\014\uffef\015\uffef\016\uffef\017\uffef\025" +
    "\uffef\027\uffef\001\002\000\006\004\005\032\047\001\002" +
    "\000\004\027\056\001\002\000\020\002\uffee\014\uffee\015" +
    "\uffee\016\uffee\017\uffee\025\uffee\027\uffee\001\002\000\004" +
    "\032\060\001\002\000\004\031\061\001\002\000\004\032" +
    "\062\001\002\000\024\002\uffeb\006\uffeb\007\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\017\uffeb\025\uffeb\027\uffeb\001\002\000" +
    "\024\002\uffe6\006\uffe6\010\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\025\uffe6\027\uffe6\001\002\000\004\032\066\001" +
    "\002\000\024\002\uffe7\006\uffe7\010\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\025\uffe7\027\uffe7\001\002\000\004\031" +
    "\067\001\002\000\004\032\070\001\002\000\024\002\uffea" +
    "\006\uffea\007\uffea\014\uffea\015\uffea\016\uffea\017\uffea\025" +
    "\uffea\027\uffea\001\002\000\004\030\077\001\002\000\004" +
    "\030\073\001\002\000\004\032\074\001\002\000\004\031" +
    "\075\001\002\000\004\032\076\001\002\000\024\002\uffe8" +
    "\006\uffe8\007\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\025" +
    "\uffe8\027\uffe8\001\002\000\004\032\100\001\002\000\004" +
    "\031\101\001\002\000\004\032\102\001\002\000\024\002" +
    "\uffe9\006\uffe9\007\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\025\uffe9\027\uffe9\001\002\000\004\002\001\001\002\000" +
    "\004\032\107\001\002\000\004\032\106\001\002\000\024" +
    "\002\uffe4\006\uffe4\010\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\025\uffe4\027\uffe4\001\002\000\024\002\uffe5\006\uffe5" +
    "\010\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\025\uffe5\027" +
    "\uffe5\001\002\000\020\002\ufff8\014\026\015\023\016\025" +
    "\017\030\025\ufff8\027\ufff8\001\002\000\020\002\ufff9\014" +
    "\026\015\023\016\025\017\030\025\ufff9\027\ufff9\001\002" +
    "\000\004\005\120\001\002\000\004\032\114\001\002\000" +
    "\004\005\115\001\002\000\004\032\116\001\002\000\004" +
    "\027\117\001\002\000\020\002\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\025\uffe1\027\uffe1\001\002\000\004\032\121" +
    "\001\002\000\020\002\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\025\uffe2\027\uffe2\001\002\000\020\002\ufffa\014\026" +
    "\015\023\016\025\017\030\025\ufffa\027\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\014\002\013\003\014\004\011\005\015\006" +
    "\006\001\001\000\014\002\121\003\014\004\011\005\015" +
    "\006\006\001\001\000\002\001\001\000\014\002\110\003" +
    "\014\004\011\005\015\006\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\107\003\014\004\011\005" +
    "\015\006\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\035\003\014\004\011\005\015" +
    "\006\006\001\001\000\014\002\021\003\014\004\011\005" +
    "\015\006\006\001\001\000\002\001\001\000\014\002\034" +
    "\003\014\004\011\005\015\006\006\001\001\000\002\001" +
    "\001\000\014\002\033\003\014\004\011\005\015\006\006" +
    "\001\001\000\014\002\032\003\014\004\011\005\015\006" +
    "\006\001\001\000\014\002\031\003\014\004\011\005\015" +
    "\006\006\001\001\000\014\002\030\003\014\004\011\005" +
    "\015\006\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\052\001\001" +
    "\000\002\001\001\000\004\006\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= formula EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formula start_val = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // formula ::= LPAREN formula RPAREN 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // formula ::= TRUE 
            {
              Formula RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formula ::= FALSE 
            {
              Formula RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // formula ::= IDENTIFIER 
            {
              Formula RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Event(new EventSymbol(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // formula ::= atempform 
            {
              Formula RESULT =null;
		int afleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula af = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = af; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formula ::= NOT formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f.negate(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // formula ::= ALWAYS formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Always(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // formula ::= EVENTUALLY formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Eventually(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // formula ::= NEXT formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Next(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formula ::= formula IFF formula 
            {
              Formula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Equivalent(f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formula ::= formula IMPLIES formula 
            {
              Formula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Implies(f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formula ::= formula AND formula 
            {
              Formula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formula ::= formula OR formula 
            {
              Formula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formula ::= formula UNTIL formula 
            {
              Formula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Until(f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // atempform ::= claim 
            {
              Formula RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Claim c = (Claim)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atempform",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atempform ::= IDENTIFIER COLON claim 
            {
              Formula RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Claim c = (Claim)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AgentClaim(new AgentSymbol(id), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atempform",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atempform ::= IDENTIFIER COLON LPAREN claim RPAREN 
            {
              Formula RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Claim c = (Claim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AgentClaim(new AgentSymbol(id), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atempform",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atempform ::= IDENTIFIER COLON SQUARE claim 
            {
              Formula RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Claim c = (Claim)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MostTrustworthy(new AgentSymbol(id), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atempform",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // atempform ::= IDENTIFIER COLON SQUARE LPAREN claim RPAREN 
            {
              Formula RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Claim c = (Claim)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MostTrustworthy(new AgentSymbol(id), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atempform",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // atempform ::= timeChain 
            {
              Formula RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula tc = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atempform",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // atempform ::= trustChain 
            {
              Formula RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula tc = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atempform",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // trustChain ::= IDENTIFIER AGENTLT LBRACK IDENTIFIER RBRACK IDENTIFIER 
            {
              Formula RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessTrustworthy(new AgentSymbol(id1), 
																						new PropositionalSymbol(id2), new AgentSymbol(id3)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trustChain",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // trustChain ::= IDENTIFIER LT LBRACK IDENTIFIER RBRACK IDENTIFIER 
            {
              Formula RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessTrustworthy(new AgentSymbol(id1), 
																						new PropositionalSymbol(id2), new AgentSymbol(id3)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trustChain",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // trustChain ::= trustChain LT LBRACK IDENTIFIER RBRACK IDENTIFIER 
            {
              Formula RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Formula tc = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
																					LessTrustworthy previous;
																					if(tc instanceof And){
																						previous = (LessTrustworthy)((And) tc).getInner2();
																					} else {
																						previous = (LessTrustworthy) tc;
																					}
																					RESULT = new And(tc , new LessTrustworthy(previous.getAgent2(), 
																						new PropositionalSymbol(id1), new AgentSymbol(id2)));
																					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trustChain",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // trustChain ::= trustChain AGENTLT LBRACK IDENTIFIER RBRACK IDENTIFIER 
            {
              Formula RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Formula tc = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
																					LessTrustworthy previous;
																					if(tc instanceof And){
																						previous = (LessTrustworthy)((And) tc).getInner2();
																					} else {
																						previous = (LessTrustworthy) tc;
																					}
																					RESULT = new And(tc , new LessTrustworthy(previous.getAgent2(), 
																						new PropositionalSymbol(id1), new AgentSymbol(id2)));
																					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trustChain",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // timeChain ::= IDENTIFIER LT IDENTIFIER 
            {
              Formula RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TimeLessThan(new TimeSymbol(id1), new TimeSymbol(id2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeChain",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // timeChain ::= IDENTIFIER EQ IDENTIFIER 
            {
              Formula RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TimeEquals(new TimeSymbol(id1), new TimeSymbol(id2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeChain",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // timeChain ::= timeChain LT IDENTIFIER 
            {
              Formula RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula tc = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
														BinaryTimeRelation previous;
														if(tc instanceof And){
															previous = (BinaryTimeRelation)((And) tc).getInner2();
														} else {
															previous = (BinaryTimeRelation) tc;
														}
														RESULT = new And(tc , new TimeLessThan(previous.getTime2(), new TimeSymbol(id)));
													
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeChain",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // timeChain ::= timeChain EQ IDENTIFIER 
            {
              Formula RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula tc = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
														BinaryTimeRelation previous;
														if(tc instanceof And){
															previous = (BinaryTimeRelation)((And) tc).getInner2();
														} else {
															previous = (BinaryTimeRelation) tc;
														}
														RESULT = new And(tc , new TimeEquals(previous.getTime2(), new TimeSymbol(id)));
													
              CUP$parser$result = parser.getSymbolFactory().newSymbol("timeChain",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // claim ::= IDENTIFIER DOT IDENTIFIER 
            {
              Claim RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Claim(new TimeSymbol(id1), 
																		new PropositionalSymbol(id2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claim",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // claim ::= MINUS IDENTIFIER DOT IDENTIFIER 
            {
              Claim RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Claim(new TimeSymbol(id1), 
																		new PropositionalSymbol(id2)).invert(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claim",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // claim ::= MINUS LPAREN IDENTIFIER DOT IDENTIFIER RPAREN 
            {
              Claim RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Claim(new TimeSymbol(id1), 
																		new PropositionalSymbol(id2)).invert(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claim",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
