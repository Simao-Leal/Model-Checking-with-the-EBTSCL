
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package claimlang;

import java_cup.runtime.*;
import claimlang.AST.*;
import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\002\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\007\000\002\006\007\000\002\007\003\000\002" +
    "\007\004\000\002\010\003\000\002\010\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\013\004\000\002\013\006\000\002" +
    "\026\003\000\002\026\004\000\002\025\006\000\002\025" +
    "\006\000\002\025\005\000\002\025\005\000\002\014\004" +
    "\000\002\014\006\000\002\024\003\000\002\024\004\000" +
    "\002\023\011\000\002\023\011\000\002\023\010\000\002" +
    "\023\010\000\002\015\007\000\002\015\010\000\002\016" +
    "\007\000\002\016\010\000\002\027\002\000\002\027\003" +
    "\000\002\027\003\000\002\027\004\000\002\027\005\000" +
    "\002\027\004\000\002\030\002\000\002\030\003\000\002" +
    "\031\010\000\002\031\012\000\002\031\011\000\002\031" +
    "\013\000\002\032\003\000\002\032\004\000\002\021\007" +
    "\000\002\022\005\000\002\017\006\000\002\017\005\000" +
    "\002\020\004\000\002\020\003\000\002\033\006\000\002" +
    "\033\006\000\002\033\007\000\002\034\007\000\002\034" +
    "\007\000\002\034\007\000\002\035\003\000\002\035\005" +
    "\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\014\002\000\004\004\005\006\035\013\036" +
    "\014\001\002\000\004\037\221\001\002\000\014\002\ufffa" +
    "\004\ufffa\005\ufffa\035\ufffa\036\ufffa\001\002\000\004\037" +
    "\044\001\002\000\014\002\ufff9\004\ufff9\005\ufff9\035\ufff9" +
    "\036\ufff9\001\002\000\014\002\ufffe\004\ufffe\005\ufffe\035" +
    "\ufffe\036\ufffe\001\002\000\004\002\043\001\002\000\014" +
    "\002\ufffc\004\ufffc\005\ufffc\035\ufffc\036\ufffc\001\002\000" +
    "\006\037\030\040\024\001\002\000\004\037\020\001\002" +
    "\000\014\002\ufffb\004\ufffb\005\ufffb\035\ufffb\036\ufffb\001" +
    "\002\000\014\002\uffff\004\004\005\006\035\013\036\014" +
    "\001\002\000\014\002\ufffd\004\ufffd\005\ufffd\035\ufffd\036" +
    "\ufffd\001\002\000\004\020\021\001\002\000\006\037\023" +
    "\040\024\001\002\000\004\022\025\001\002\000\004\022" +
    "\uffba\001\002\000\010\022\uffb9\032\uffb9\034\uffb9\001\002" +
    "\000\014\002\uffbf\004\uffbf\005\uffbf\035\uffbf\036\uffbf\001" +
    "\002\000\006\032\040\034\037\001\002\000\006\023\031" +
    "\033\032\001\002\000\012\023\uffbc\032\uffba\033\uffbc\034" +
    "\uffba\001\002\000\004\037\036\001\002\000\006\037\023" +
    "\040\024\001\002\000\004\022\034\001\002\000\014\002" +
    "\uffc0\004\uffc0\005\uffc0\035\uffc0\036\uffc0\001\002\000\010" +
    "\022\uffbb\023\uffbb\033\uffbb\001\002\000\010\022\uffbc\023" +
    "\uffbc\033\uffbc\001\002\000\004\022\042\001\002\000\004" +
    "\022\041\001\002\000\014\002\uffc2\004\uffc2\005\uffc2\035" +
    "\uffc2\036\uffc2\001\002\000\014\002\uffc1\004\uffc1\005\uffc1" +
    "\035\uffc1\036\uffc1\001\002\000\004\002\001\001\002\000" +
    "\006\020\046\030\045\001\002\000\016\006\054\007\055" +
    "\010\063\011\052\026\057\037\056\001\002\000\004\037" +
    "\036\001\002\000\006\022\050\023\031\001\002\000\014" +
    "\002\uffbd\004\uffbd\005\uffbd\035\uffbd\036\uffbd\001\002\000" +
    "\004\031\220\001\002\000\006\030\174\037\175\001\002" +
    "\000\020\006\054\007\055\010\063\011\052\026\057\031" +
    "\ufff4\037\056\001\002\000\004\037\165\001\002\000\004" +
    "\006\115\001\002\000\004\013\111\001\002\000\004\037" +
    "\107\001\002\000\020\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\026\uffeb\031\uffeb\037\uffeb\001\002\000\004\037\056\001" +
    "\002\000\020\006\uffee\007\uffee\010\uffee\011\uffee\026\uffee" +
    "\031\uffee\037\uffee\001\002\000\006\030\067\037\071\001" +
    "\002\000\020\006\uffed\007\uffed\010\uffed\011\uffed\026\uffed" +
    "\031\uffed\037\uffed\001\002\000\020\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\026\uffc3\031\uffc3\037\uffc3\001\002\000\020" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\026\uffec\031\uffec\037" +
    "\uffec\001\002\000\004\037\071\001\002\000\020\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\026\uffea\031\uffea\037\uffea\001" +
    "\002\000\006\016\073\020\072\001\002\000\004\037\100" +
    "\001\002\000\004\037\075\001\002\000\020\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\026\uffe4\031\uffe4\037\uffe4\001\002" +
    "\000\010\016\073\020\072\022\076\001\002\000\020\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\026\uffe6\031\uffe6\037\uffe6" +
    "\001\002\000\020\006\uffe3\007\uffe3\010\uffe3\011\uffe3\026" +
    "\uffe3\031\uffe3\037\uffe3\001\002\000\010\016\073\020\072" +
    "\022\101\001\002\000\020\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\026\uffe5\031\uffe5\037\uffe5\001\002\000\006\031\uffe8" +
    "\037\uffe8\001\002\000\006\031\105\037\071\001\002\000" +
    "\006\031\uffe7\037\uffe7\001\002\000\020\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\026\uffe9\031\uffe9\037\uffe9\001\002\000" +
    "\020\006\uffc4\007\uffc4\010\uffc4\011\uffc4\026\uffc4\031\uffc4" +
    "\037\uffc4\001\002\000\004\027\110\001\002\000\004\037" +
    "\uffc7\001\002\000\004\037\112\001\002\000\006\013\111" +
    "\022\114\001\002\000\020\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\026\uffc5\031\uffc5\037\uffc5\001\002\000\020\006\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\026\uffc6\031\uffc6\037\uffc6\001" +
    "\002\000\004\037\116\001\002\000\004\030\117\001\002" +
    "\000\010\012\121\031\uffd6\037\124\001\002\000\004\031" +
    "\164\001\002\000\004\024\160\001\002\000\010\012\uffca" +
    "\031\uffca\037\124\001\002\000\006\031\uffd4\037\124\001" +
    "\002\000\004\021\130\001\002\000\006\012\121\031\uffd5" +
    "\001\002\000\006\031\uffd1\037\124\001\002\000\004\031" +
    "\uffd2\001\002\000\010\014\131\024\132\037\133\001\002" +
    "\000\006\024\144\037\145\001\002\000\004\037\137\001" +
    "\002\000\004\015\134\001\002\000\004\037\135\001\002" +
    "\000\004\022\136\001\002\000\010\012\uffce\031\uffce\037" +
    "\uffce\001\002\000\004\015\140\001\002\000\004\037\141" +
    "\001\002\000\004\025\142\001\002\000\004\022\143\001" +
    "\002\000\010\012\uffcd\031\uffcd\037\uffcd\001\002\000\004" +
    "\037\151\001\002\000\004\015\146\001\002\000\004\037" +
    "\147\001\002\000\004\022\150\001\002\000\010\012\uffcc" +
    "\031\uffcc\037\uffcc\001\002\000\004\015\152\001\002\000" +
    "\004\037\153\001\002\000\004\025\154\001\002\000\004" +
    "\022\155\001\002\000\010\012\uffcb\031\uffcb\037\uffcb\001" +
    "\002\000\004\031\uffd3\001\002\000\006\012\uffc9\031\uffc9" +
    "\001\002\000\004\037\161\001\002\000\004\025\162\001" +
    "\002\000\004\022\163\001\002\000\006\031\uffc8\037\uffc8" +
    "\001\002\000\020\006\uffd7\007\uffd7\010\uffd7\011\uffd7\026" +
    "\uffd7\031\uffd7\037\uffd7\001\002\000\004\030\166\001\002" +
    "\000\006\031\uffd0\037\124\001\002\000\004\031\171\001" +
    "\002\000\004\031\uffcf\001\002\000\020\006\uffd8\007\uffd8" +
    "\010\uffd8\011\uffd8\026\uffd8\031\uffd8\037\uffd8\001\002\000" +
    "\004\031\ufff3\001\002\000\020\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\026\uffe2\031\uffe2\037\uffe2\001\002\000\004\037" +
    "\175\001\002\000\006\016\177\017\176\001\002\000\004" +
    "\026\206\001\002\000\004\026\200\001\002\000\004\037" +
    "\201\001\002\000\004\027\202\001\002\000\004\037\204" +
    "\001\002\000\020\006\uffdc\007\uffdc\010\uffdc\011\uffdc\026" +
    "\uffdc\031\uffdc\037\uffdc\001\002\000\010\016\177\017\176" +
    "\022\205\001\002\000\020\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\026\uffdd\031\uffdd\037\uffdd\001\002\000\004\037\207" +
    "\001\002\000\004\027\210\001\002\000\004\037\212\001" +
    "\002\000\020\006\uffdb\007\uffdb\010\uffdb\011\uffdb\026\uffdb" +
    "\031\uffdb\037\uffdb\001\002\000\010\016\177\017\176\022" +
    "\213\001\002\000\020\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\026\uffde\031\uffde\037\uffde\001\002\000\006\031\uffe0\037" +
    "\uffe0\001\002\000\006\031\217\037\175\001\002\000\006" +
    "\031\uffdf\037\uffdf\001\002\000\020\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\026\uffe1\031\uffe1\037\uffe1\001\002\000\014" +
    "\002\ufff7\004\ufff7\005\ufff7\035\ufff7\036\ufff7\001\002\000" +
    "\006\020\223\030\222\001\002\000\014\006\227\007\230" +
    "\010\063\011\052\037\056\001\002\000\004\037\036\001" +
    "\002\000\006\022\225\023\031\001\002\000\014\002\uffbe" +
    "\004\uffbe\005\uffbe\035\uffbe\036\uffbe\001\002\000\016\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\031\ufff0\037\ufff0\001\002" +
    "\000\004\037\245\001\002\000\004\006\240\001\002\000" +
    "\004\031\237\001\002\000\016\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\031\ufff2\037\ufff2\001\002\000\016\006\227\007" +
    "\230\010\063\011\052\031\ufff6\037\056\001\002\000\016" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\031\ufff1\037\ufff1\001" +
    "\002\000\016\006\uffef\007\uffef\010\uffef\011\uffef\031\uffef" +
    "\037\uffef\001\002\000\004\031\ufff5\001\002\000\014\002" +
    "\ufff8\004\ufff8\005\ufff8\035\ufff8\036\ufff8\001\002\000\004" +
    "\037\241\001\002\000\004\030\242\001\002\000\010\012" +
    "\121\031\uffd6\037\124\001\002\000\004\031\244\001\002" +
    "\000\016\006\uffd9\007\uffd9\010\uffd9\011\uffd9\031\uffd9\037" +
    "\uffd9\001\002\000\004\030\246\001\002\000\010\012\121" +
    "\031\uffd6\037\124\001\002\000\004\031\250\001\002\000" +
    "\016\006\uffda\007\uffda\010\uffda\011\uffda\031\uffda\037\uffda" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\020\002\010\003\015\004\007\005\011\006" +
    "\014\033\004\034\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\026" +
    "\036\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\016\005\011\006\014\033\004\034\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\034\001\001\000\004\036\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\010\050\012\052\013\061\014\063" +
    "\016\065\017\064\020\057\022\060\001\001\000\004\035" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\172\001\001\000\022\010\171\012" +
    "\052\013\061\014\063\016\065\017\064\020\057\022\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\105" +
    "\001\001\000\002\001\001\000\004\025\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\101\026\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\076\001\001\000\004\025\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\122\027\117\031\121\032\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\121" +
    "\032\156\001\001\000\006\031\121\032\155\001\001\000" +
    "\002\001\001\000\004\021\125\001\001\000\006\031\121" +
    "\032\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\166\031\121\032\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\213\024\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\007\230" +
    "\011\232\013\231\014\233\015\225\017\234\001\001\000" +
    "\004\035\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\007\235\011\232" +
    "\013\231\014\233\015\225\017\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\122\027" +
    "\242\031\121\032\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\021\122\027\246\031" +
    "\121\032\124\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FileNode start_val = (FileNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= 
            {
              FileNode RESULT =null;
		 RESULT = new FileNode(new LinkedList<>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file ::= declarations 
            {
              FileNode RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<BasicNode> decls = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FileNode(decls); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declaration 
            {
              List<BasicNode> RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BasicNode decl = (BasicNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(decl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declarations declaration 
            {
              List<BasicNode> RESULT =null;
		int declsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<BasicNode> decls = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BasicNode decl = (BasicNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 decls.add(decl); RESULT = decls; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= transition_system 
            {
              BasicNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TransitionSystemNode ts = (TransitionSystemNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ts;       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= action_transition_system 
            {
              BasicNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActionTransitionSystemNode ts = (ActionTransitionSystemNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ts;       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= check 
            {
              BasicNode RESULT =null;
		int chckleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chckright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BasicNode chck = (BasicNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = chck;     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= assignment 
            {
              BasicNode RESULT =null;
		int assgnmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assgnmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BasicNode assgnmnt = (BasicNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = assgnmnt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // transition_system ::= tTRANSITIONSYSTEM tIDENTIFIER tLCURLY statements tRCURLY 
            {
              TransitionSystemNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<BasicNode> stmnts = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TransitionSystemNode(id, stmnts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transition_system",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // action_transition_system ::= tACTIONTRANSITIONSYSTEM tIDENTIFIER tLCURLY action_statements tRCURLY 
            {
              ActionTransitionSystemNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<BasicNode> stmnts = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ActionTransitionSystemNode(id, stmnts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_transition_system",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statements ::= statement 
            {
              List<BasicNode> RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BasicNode stmnt = (BasicNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(stmnt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statements ::= statement statements 
            {
              List<BasicNode> RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BasicNode stmnt = (BasicNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<BasicNode> stmnts = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 stmnts.add(0, stmnt); RESULT = stmnts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // action_statements ::= action_statement 
            {
              List<BasicNode> RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BasicNode stmnt = (BasicNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(stmnt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_statements",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // action_statements ::= action_statement action_statements 
            {
              List<BasicNode> RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BasicNode stmnt = (BasicNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<BasicNode> stmnts = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 stmnts.add(0, stmnt); RESULT = stmnts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_statements",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= time_order 
            {
              BasicNode RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TimeOrderNode stmnt = (TimeOrderNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmnt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= trust_order 
            {
              BasicNode RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TrustOrderNode stmnt = (TrustOrderNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmnt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= state 
            {
              BasicNode RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StateNode stmnt = (StateNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmnt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= transitions 
            {
              BasicNode RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TransitionNode stmnt = (TransitionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmnt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // action_statement ::= time_order 
            {
              BasicNode RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TimeOrderNode stmnt = (TimeOrderNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmnt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // action_statement ::= trust_order 
            {
              BasicNode RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TrustOrderNode stmnt = (TrustOrderNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmnt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // action_statement ::= action_state 
            {
              BasicNode RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActionStateNode stmnt = (ActionStateNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmnt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // action_statement ::= action_transitions 
            {
              BasicNode RESULT =null;
		int stmntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ActionTransitionNode stmnt = (ActionTransitionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmnt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // time_order ::= tTIMEORDER time_chain 
            {
              TimeOrderNode RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<TimeComparisonNode> tc = (List<TimeComparisonNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TimeOrderNode(tc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_order",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // time_order ::= tTIMEORDER tLCURLY time_chains tRCURLY 
            {
              TimeOrderNode RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<TimeComparisonNode> tc = (List<TimeComparisonNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TimeOrderNode(tc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_order",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // time_chains ::= time_chain 
            {
              List<TimeComparisonNode> RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<TimeComparisonNode> tc = (List<TimeComparisonNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_chains",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // time_chains ::= time_chains time_chain 
            {
              List<TimeComparisonNode> RESULT =null;
		int tcsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tcsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<TimeComparisonNode> tcs = (List<TimeComparisonNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<TimeComparisonNode> tc = (List<TimeComparisonNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tcs.addAll(tc); RESULT = tcs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_chains",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // time_chain ::= tIDENTIFIER tLT tIDENTIFIER tSEMICOLON 
            {
              List<TimeComparisonNode> RESULT =null;
		int idtime1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idtime1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idtime1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idtime2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idtime2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String idtime2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new TimeLessThanNode(idtime1, idtime2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_chain",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // time_chain ::= tIDENTIFIER tEQ tIDENTIFIER tSEMICOLON 
            {
              List<TimeComparisonNode> RESULT =null;
		int idtime1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idtime1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idtime1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idtime2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idtime2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String idtime2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new TimeEqualsNode(idtime1, idtime2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_chain",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // time_chain ::= tIDENTIFIER tLT time_chain 
            {
              List<TimeComparisonNode> RESULT =null;
		int idtimeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idtimeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idtime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<TimeComparisonNode> tc = (List<TimeComparisonNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tc.add(0, new TimeLessThanNode(idtime, tc.get(0).idLeft) ); RESULT = tc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_chain",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // time_chain ::= tIDENTIFIER tEQ time_chain 
            {
              List<TimeComparisonNode> RESULT =null;
		int idtimeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idtimeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idtime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<TimeComparisonNode> tc = (List<TimeComparisonNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tc.add(0, new TimeEqualsNode(idtime, tc.get(0).idLeft) ); RESULT = tc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_chain",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // trust_order ::= tTRUSTORDER trust_chain 
            {
              TrustOrderNode RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<TrustLessThanNode> tc = (List<TrustLessThanNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TrustOrderNode(tc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trust_order",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // trust_order ::= tTRUSTORDER tLCURLY trust_chains tRCURLY 
            {
              TrustOrderNode RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<TrustLessThanNode> tc = (List<TrustLessThanNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TrustOrderNode(tc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trust_order",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // trust_chains ::= trust_chain 
            {
              List<TrustLessThanNode> RESULT =null;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<TrustLessThanNode> tc = (List<TrustLessThanNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trust_chains",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // trust_chains ::= trust_chains trust_chain 
            {
              List<TrustLessThanNode> RESULT =null;
		int tcsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tcsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<TrustLessThanNode> tcs = (List<TrustLessThanNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<TrustLessThanNode> tc = (List<TrustLessThanNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tcs.addAll(tc); RESULT = tcs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trust_chains",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // trust_chain ::= tIDENTIFIER tAGENTLT tLBRACK tIDENTIFIER tRBRACK tIDENTIFIER tSEMICOLON 
            {
              List<TrustLessThanNode> RESULT =null;
		int idagent1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idagent1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String idagent1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idpropleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idpropright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idprop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idagent2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idagent2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String idagent2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new TrustLessThanNode(idagent1, idprop, idagent2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trust_chain",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // trust_chain ::= tIDENTIFIER tLT tLBRACK tIDENTIFIER tRBRACK tIDENTIFIER tSEMICOLON 
            {
              List<TrustLessThanNode> RESULT =null;
		int idagent1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idagent1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String idagent1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idpropleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idpropright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idprop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idagent2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idagent2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String idagent2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>(); RESULT.add(new TrustLessThanNode(idagent1, idprop, idagent2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trust_chain",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // trust_chain ::= tIDENTIFIER tLT tLBRACK tIDENTIFIER tRBRACK trust_chain 
            {
              List<TrustLessThanNode> RESULT =null;
		int idagentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idagentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String idagent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idpropleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idpropright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idprop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<TrustLessThanNode> tc = (List<TrustLessThanNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tc.add(0, new TrustLessThanNode(idagent, idprop, tc.get(0).idLeft) ); RESULT = tc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trust_chain",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // trust_chain ::= tIDENTIFIER tAGENTLT tLBRACK tIDENTIFIER tRBRACK trust_chain 
            {
              List<TrustLessThanNode> RESULT =null;
		int idagentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idagentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String idagent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idpropleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idpropright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idprop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<TrustLessThanNode> tc = (List<TrustLessThanNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tc.add(0, new TrustLessThanNode(idagent, idprop, tc.get(0).idLeft) ); RESULT = tc; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("trust_chain",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // state ::= tSTATE tIDENTIFIER tLCURLY state_statements tRCURLY 
            {
              StateNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<BasicNode> stmnts = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StateNode(id, false, stmnts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // state ::= tINITIAL tSTATE tIDENTIFIER tLCURLY state_statements tRCURLY 
            {
              StateNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<BasicNode> stmnts = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StateNode(id, true, stmnts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // action_state ::= tSTATE tIDENTIFIER tLCURLY action_state_statements tRCURLY 
            {
              ActionStateNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<BasicNode> stmnts = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ActionStateNode(id, false, stmnts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_state",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // action_state ::= tINITIAL tSTATE tIDENTIFIER tLCURLY state_statements tRCURLY 
            {
              ActionStateNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<BasicNode> stmnts = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ActionStateNode(id, true, stmnts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_state",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // state_statements ::= 
            {
              List<BasicNode> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_statements",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // state_statements ::= claims 
            {
              List<BasicNode> RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<BasicNode> stmnts = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmnts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_statements",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // state_statements ::= state_event 
            {
              List<BasicNode> RESULT =null;
		int evntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EventNode evnt = (EventNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(evnt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_statements",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // state_statements ::= state_event claims 
            {
              List<BasicNode> RESULT =null;
		int evntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int evntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EventNode evnt = (EventNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<BasicNode> stmnts = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 stmnts.add(evnt); RESULT = stmnts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_statements",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // state_statements ::= claims state_event claims 
            {
              List<BasicNode> RESULT =null;
		int stmnts1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmnts1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<BasicNode> stmnts1 = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int evntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int evntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EventNode evnt = (EventNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmnts2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmnts2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<BasicNode> stmnts2 = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 stmnts1.add(evnt); stmnts1.addAll(stmnts2); RESULT = stmnts1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_statements",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // state_statements ::= claims state_event 
            {
              List<BasicNode> RESULT =null;
		int stmntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<BasicNode> stmnts = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int evntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int evntright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EventNode evnt = (EventNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 stmnts.add(evnt); RESULT = stmnts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_statements",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // action_state_statements ::= 
            {
              List<BasicNode> RESULT =null;
		 RESULT = new LinkedList<>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_state_statements",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // action_state_statements ::= claims 
            {
              List<BasicNode> RESULT =null;
		int clmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<BasicNode> clms = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = clms; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_state_statements",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // claim ::= tIDENTIFIER tCOLON tIDENTIFIER tDOT tIDENTIFIER tSEMICOLON 
            {
              ClaimNode RESULT =null;
		int idagentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idagentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String idagent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idtimeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idtimeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idtime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idpropleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idpropright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String idprop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClaimNode(idagent, false, idtime, idprop); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claim",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // claim ::= tIDENTIFIER tCOLON tLPAREN tIDENTIFIER tDOT tIDENTIFIER tRPAREN tSEMICOLON 
            {
              ClaimNode RESULT =null;
		int idagentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idagentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String idagent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idtimeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idtimeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String idtime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idpropleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idpropright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idprop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ClaimNode(idagent, false, idtime, idprop); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claim",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // claim ::= tIDENTIFIER tCOLON tMINUS tIDENTIFIER tDOT tIDENTIFIER tSEMICOLON 
            {
              ClaimNode RESULT =null;
		int idagentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idagentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String idagent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idtimeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idtimeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idtime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idpropleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idpropright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String idprop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ClaimNode(idagent, true, idtime, idprop); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claim",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // claim ::= tIDENTIFIER tCOLON tMINUS tLPAREN tIDENTIFIER tDOT tIDENTIFIER tRPAREN tSEMICOLON 
            {
              ClaimNode RESULT =null;
		int idagentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idagentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String idagent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idtimeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idtimeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String idtime = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idpropleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idpropright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idprop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ClaimNode(idagent, true, idtime, idprop); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claim",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // claims ::= claim 
            {
              List<BasicNode> RESULT =null;
		int clmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClaimNode clm = (ClaimNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(clm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claims",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // claims ::= claim claims 
            {
              List<BasicNode> RESULT =null;
		int clmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClaimNode clm = (ClaimNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int clmsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clmsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<BasicNode> clms = (List<BasicNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 clms.add(clm); RESULT = clms; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("claims",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // state_event ::= tEVENT tLPAREN tIDENTIFIER tRPAREN tSEMICOLON 
            {
              EventNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new EventNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("state_event",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // transition_event ::= tLBRACK tIDENTIFIER tRBRACK 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transition_event",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // transitions ::= tIDENTIFIER tARROW tIDENTIFIER tSEMICOLON 
            {
              TransitionNode RESULT =null;
		int idsourceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idsourceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String idsource = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idtargetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idtargetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String idtarget = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TransitionNode(idsource, idtarget); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transitions",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // transitions ::= tIDENTIFIER tARROW transitions 
            {
              TransitionNode RESULT =null;
		int idsourceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsourceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String idsource = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int trnstntsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trnstntsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TransitionNode trnstnts = (TransitionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = trnstnts.prepend(idsource); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("transitions",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // action_transitions ::= transition_event transitions 
            {
              ActionTransitionNode RESULT =null;
		int evntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int evntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String evnt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trnstnsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trnstnsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TransitionNode trnstns = (TransitionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ActionTransitionNode(evnt, trnstns); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_transitions",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // action_transitions ::= transitions 
            {
              ActionTransitionNode RESULT =null;
		int trnstnsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trnstnsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TransitionNode trnstns = (TransitionNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ActionTransitionNode(null, trnstns); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_transitions",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // check ::= tCHECK formula_expression tSATISFIABLE tSEMICOLON 
            {
              BasicNode RESULT =null;
		int formulaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int formularight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BasicNode formula = (BasicNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CheckSatNode(formula); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("check",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // check ::= tCHECK formula_expression tVALID tSEMICOLON 
            {
              BasicNode RESULT =null;
		int formulaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int formularight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BasicNode formula = (BasicNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CheckValNode(formula); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("check",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // check ::= tCHECK ts_expression tSATISFIES formula_expression tSEMICOLON 
            {
              BasicNode RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PrintableNode ts = (PrintableNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int formulaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formularight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BasicNode formula = (BasicNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CheckTSSatFormulaNode(ts, formula); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("check",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assignment ::= tFORMULA tIDENTIFIER tEQ formula_expression tSEMICOLON 
            {
              BasicNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int formulaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formularight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BasicNode formula = (BasicNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FormulaAssignmentNode(id, formula); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assignment ::= tTRANSITIONSYSTEM tIDENTIFIER tEQ ts_expression tSEMICOLON 
            {
              BasicNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PrintableNode ts = (PrintableNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TSAssignmentNode(id, ts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignment ::= tACTIONTRANSITIONSYSTEM tIDENTIFIER tEQ ts_expression tSEMICOLON 
            {
              BasicNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PrintableNode ts = (PrintableNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ATSAssignmentNode(id, ts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ts_expression ::= tIDENTIFIER 
            {
              PrintableNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RValueNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ts_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ts_expression ::= ts_expression tPRODUCT ts_expression 
            {
              PrintableNode RESULT =null;
		int _leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PrintableNode _left = (PrintableNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int _rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrintableNode _right = (PrintableNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProductNode(_left, _right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ts_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // formula_expression ::= tIDENTIFIER 
            {
              BasicNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RValueNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // formula_expression ::= tFORMULALITERAL 
            {
              BasicNode RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FormulaLiteralNode(string); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
