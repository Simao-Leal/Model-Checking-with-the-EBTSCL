// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: TSscanner.flex

/*
 * The EventTransitionSystem class used to be called ActionTransitionSystem.
 * This is why there are many references to action_statements, action_state, action_transitions, etc.
 * The classes in the AST are also called ActionStateNode, etc. It would be nice to change these all
 * to EventStateNode, etc. (basically replace action with event in many places) which I shall do when
 * I have time. But for now it seems like it would take a lot of time. As this code is not very substancial
 * within the thesis (it is literally just syntatic sugar), I will handle this later. 
 */

package claimlang;
import java_cup.runtime.*;

import java.io.IOException;
import java.io.StringReader;
 

@SuppressWarnings("fallthrough")
public class TSScanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\1\u1f00\11\u2000\1\u2100\1\u2200\1\u2300\1\u2000"+
    "\1\u2400\1\u2500\2\u2000\31\u0100\1\u2600\126\u0100\1\u2700\1\u0100"+
    "\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100\1\u2e00"+
    "\10\u2f00\31\u2000\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u0100"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000\1\u5100"+
    "\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\11\u2000\1\u5600\4\u0100"+
    "\1\u5700\17\u2000\2\u0100\1\u5800\41\u2000\2\u0100\1\u5900\1\u5a00"+
    "\2\u2000\1\u5b00\1\u5c00\27\u0100\1\u5d00\4\u0100\1\u5e00\1\u5f00"+
    "\41\u2000\1\u6000\1\u0100\1\u6100\1\u6200\11\u2000\1\u6300\22\u2000"+
    "\1\u6400\1\u2000\1\u6500\1\u6600\1\u2000\1\u6700\1\u6800\1\u6900"+
    "\1\u6a00\2\u2000\1\u6b00\4\u2000\1\u6c00\1\u6d00\1\u6e00\1\u6f00"+
    "\4\u2000\1\u7000\1\u7100\1\u7200\2\u2000\1\u7300\1\u2000\1\u7400"+
    "\14\u2000\1\u7500\4\u2000\246\u0100\1\u7600\20\u0100\1\u7700\1\u7800"+
    "\25\u0100\1\u7900\34\u0100\1\u7a00\14\u2000\2\u0100\1\u7b00\5\u2000"+
    "\23\u0100\1\u7c00\u0aec\u2000\1\u7d00\1\u7e00\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\16\0\4\6"+
    "\1\1\1\6\1\7\1\6\1\10\3\6\1\11\1\12"+
    "\1\13\2\6\1\14\1\15\1\16\12\0\1\17\1\20"+
    "\1\21\1\22\1\23\2\6\1\24\1\10\1\25\1\26"+
    "\1\27\1\30\2\10\1\31\3\10\1\32\1\10\1\33"+
    "\3\10\1\34\1\35\1\10\1\36\4\10\1\37\1\6"+
    "\1\40\1\6\1\10\1\6\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\10\1\52\1\53"+
    "\1\54\1\55\1\56\2\10\1\57\1\60\1\61\1\62"+
    "\1\63\2\10\1\64\1\10\1\65\1\6\1\66\1\6"+
    "\6\0\1\67\32\0\2\6\4\10\4\6\1\10\2\6"+
    "\1\0\7\6\1\10\4\6\1\10\5\6\27\10\1\6"+
    "\37\10\1\6\u01ca\10\4\6\14\10\16\6\5\10\7\6"+
    "\1\10\1\6\1\10\21\6\160\0\5\10\1\6\2\10"+
    "\2\6\4\10\1\6\1\10\6\6\1\10\1\6\3\10"+
    "\1\6\1\10\1\6\24\10\1\6\123\10\1\6\213\10"+
    "\1\6\5\0\2\6\246\10\1\6\46\10\2\6\1\10"+
    "\6\6\51\10\6\6\1\10\1\6\55\0\1\6\1\0"+
    "\1\6\2\0\1\6\2\0\1\6\1\0\10\6\33\10"+
    "\4\6\4\10\15\6\6\0\5\6\1\10\4\6\13\0"+
    "\1\6\1\0\3\6\53\10\37\0\4\6\2\10\1\0"+
    "\143\10\1\6\1\10\10\0\1\6\6\0\2\10\2\0"+
    "\1\6\4\0\2\10\12\0\3\10\2\6\1\10\17\6"+
    "\1\0\1\10\1\0\36\10\33\0\2\6\131\10\13\0"+
    "\1\10\16\6\12\0\41\10\11\0\2\10\4\6\1\10"+
    "\2\6\1\0\30\10\4\0\1\10\11\0\1\10\3\0"+
    "\1\10\5\0\22\6\31\10\3\0\4\6\13\10\5\6"+
    "\30\10\1\6\6\10\1\6\2\0\6\6\10\0\52\10"+
    "\72\0\66\10\3\0\1\10\22\0\1\10\7\0\12\10"+
    "\2\0\2\6\12\0\1\6\20\10\3\0\1\6\10\10"+
    "\2\6\2\10\2\6\26\10\1\6\7\10\1\6\1\10"+
    "\3\6\4\10\2\6\1\0\1\10\7\0\2\6\2\0"+
    "\2\6\3\0\1\10\10\6\1\0\4\6\2\10\1\6"+
    "\3\10\2\0\2\6\12\0\4\10\7\6\2\10\1\6"+
    "\1\0\2\6\3\0\1\6\6\10\4\6\2\10\2\6"+
    "\26\10\1\6\7\10\1\6\2\10\1\6\2\10\1\6"+
    "\2\10\2\6\1\0\1\6\5\0\4\6\2\0\2\6"+
    "\3\0\3\6\1\0\7\6\4\10\1\6\1\10\7\6"+
    "\14\0\3\10\1\0\13\6\3\0\1\6\11\10\1\6"+
    "\3\10\1\6\26\10\1\6\7\10\1\6\2\10\1\6"+
    "\5\10\2\6\1\0\1\10\10\0\1\6\3\0\1\6"+
    "\3\0\2\6\1\10\17\6\2\10\2\0\2\6\12\0"+
    "\1\6\1\10\7\6\1\10\6\0\1\6\3\0\1\6"+
    "\10\10\2\6\2\10\2\6\26\10\1\6\7\10\1\6"+
    "\2\10\1\6\5\10\2\6\1\0\1\10\7\0\2\6"+
    "\2\0\2\6\3\0\7\6\3\0\4\6\2\10\1\6"+
    "\3\10\2\0\2\6\12\0\1\6\1\10\20\6\1\0"+
    "\1\10\1\6\6\10\3\6\3\10\1\6\4\10\3\6"+
    "\2\10\1\6\1\10\1\6\2\10\3\6\2\10\3\6"+
    "\3\10\3\6\14\10\4\6\5\0\3\6\3\0\1\6"+
    "\4\0\2\6\1\10\6\6\1\0\16\6\12\0\11\6"+
    "\1\10\6\6\5\0\10\10\1\6\3\10\1\6\27\10"+
    "\1\6\20\10\2\6\1\0\1\10\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\1\6\3\10\2\6\1\10"+
    "\2\6\2\10\2\0\2\6\12\0\20\6\1\10\3\0"+
    "\1\6\10\10\1\6\3\10\1\6\27\10\1\6\12\10"+
    "\1\6\5\10\2\6\1\0\1\10\7\0\1\6\3\0"+
    "\1\6\4\0\7\6\2\0\6\6\2\10\1\6\2\10"+
    "\2\0\2\6\12\0\1\6\2\10\15\6\4\0\11\10"+
    "\1\6\3\10\1\6\51\10\2\0\1\10\7\0\1\6"+
    "\3\0\1\6\4\0\1\10\5\6\3\10\1\0\7\6"+
    "\3\10\2\0\2\6\12\0\12\6\6\10\1\6\3\0"+
    "\1\6\22\10\3\6\30\10\1\6\11\10\1\6\1\10"+
    "\2\6\7\10\3\6\1\0\4\6\6\0\1\6\1\0"+
    "\1\6\10\0\6\6\12\0\2\6\2\0\15\6\60\10"+
    "\1\0\2\10\7\0\4\6\10\10\10\0\1\6\12\0"+
    "\47\6\2\10\1\6\1\10\1\6\5\10\1\6\30\10"+
    "\1\6\1\10\1\6\12\10\1\0\2\10\11\0\1\10"+
    "\2\6\5\10\1\6\1\10\1\6\6\0\2\6\12\0"+
    "\2\6\4\10\40\6\1\10\27\6\2\0\6\6\12\0"+
    "\13\6\1\0\1\6\1\0\1\6\1\0\4\6\2\0"+
    "\10\10\1\6\44\10\4\6\24\0\1\6\2\0\5\10"+
    "\13\0\1\6\44\0\11\6\1\0\71\6\53\10\24\0"+
    "\1\10\12\0\6\6\6\10\4\0\4\10\3\0\1\10"+
    "\3\0\2\10\7\0\3\10\4\0\15\10\14\0\1\10"+
    "\17\0\2\6\46\10\1\6\1\10\5\6\1\10\2\6"+
    "\53\10\1\6\115\10\1\6\4\10\2\6\7\10\1\6"+
    "\1\10\1\6\4\10\2\6\51\10\1\6\4\10\2\6"+
    "\41\10\1\6\4\10\2\6\7\10\1\6\1\10\1\6"+
    "\4\10\2\6\17\10\1\6\71\10\1\6\4\10\2\6"+
    "\103\10\2\6\3\0\40\6\20\10\20\6\126\10\2\6"+
    "\6\10\3\6\u016c\10\2\6\21\10\1\6\32\10\5\6"+
    "\113\10\3\6\13\10\7\6\22\10\4\0\11\6\23\10"+
    "\3\0\13\6\22\10\2\0\14\6\15\10\1\6\3\10"+
    "\1\6\2\0\14\6\64\10\40\0\3\6\1\10\3\6"+
    "\2\10\1\0\2\6\12\0\41\6\17\0\6\6\131\10"+
    "\7\6\5\10\2\0\42\10\1\0\1\10\5\6\106\10"+
    "\12\6\37\10\1\6\14\0\4\6\14\0\12\6\12\0"+
    "\36\10\2\6\5\10\13\6\54\10\4\6\32\10\6\6"+
    "\12\0\46\6\27\10\5\0\4\6\65\10\12\0\1\6"+
    "\35\0\2\6\13\0\6\6\12\0\15\6\1\10\10\6"+
    "\16\0\1\6\20\0\61\6\5\0\57\10\21\0\10\10"+
    "\3\6\12\0\21\6\11\0\14\6\3\0\36\10\15\0"+
    "\2\10\12\0\54\10\16\0\14\6\44\10\24\0\10\6"+
    "\12\0\3\6\3\10\12\0\44\10\2\6\11\10\7\6"+
    "\53\10\2\6\3\10\20\6\3\0\1\6\25\0\4\10"+
    "\1\0\6\10\1\0\2\10\3\0\1\10\5\6\300\10"+
    "\100\0\26\10\2\6\6\10\2\6\46\10\2\6\6\10"+
    "\2\6\10\10\1\6\1\10\1\6\1\10\1\6\1\10"+
    "\1\6\37\10\2\6\65\10\1\6\7\10\1\6\1\10"+
    "\3\6\3\10\1\6\7\10\3\6\4\10\2\6\6\10"+
    "\4\6\15\10\5\6\3\10\1\6\7\10\16\6\5\0"+
    "\30\6\2\3\5\0\20\6\2\10\23\6\1\10\13\6"+
    "\5\0\1\6\12\0\1\6\1\10\15\6\1\10\20\6"+
    "\15\10\3\6\41\10\17\6\15\0\4\6\1\0\3\6"+
    "\14\0\21\6\1\10\4\6\1\10\2\6\12\10\1\6"+
    "\1\10\3\6\5\10\6\6\1\10\1\6\1\10\1\6"+
    "\1\10\1\6\4\10\1\6\13\10\2\6\4\10\5\6"+
    "\5\10\4\6\1\10\21\6\51\10\220\6\1\15\53\6"+
    "\1\22\156\6\1\70\u014b\6\345\10\6\6\4\10\3\0"+
    "\2\10\14\6\46\10\1\6\1\10\5\6\1\10\2\6"+
    "\70\10\7\6\1\10\17\6\1\0\27\10\11\6\7\10"+
    "\1\6\7\10\1\6\7\10\1\6\7\10\1\6\7\10"+
    "\1\6\7\10\1\6\7\10\1\6\7\10\1\6\40\0"+
    "\57\6\1\10\325\6\3\10\31\6\11\10\6\0\1\6"+
    "\5\10\2\6\5\10\4\6\126\10\2\6\2\0\2\6"+
    "\3\10\1\6\132\10\1\6\4\10\5\6\53\10\1\6"+
    "\136\10\21\6\40\10\60\6\320\10\100\6\215\10\103\6"+
    "\56\10\2\6\15\10\3\6\20\10\12\0\2\10\24\6"+
    "\57\10\1\0\4\6\12\0\1\6\37\10\2\0\120\10"+
    "\2\0\45\6\11\10\2\6\147\10\2\6\100\10\5\6"+
    "\2\10\1\6\1\10\1\6\5\10\30\6\20\10\1\0"+
    "\3\10\1\0\4\10\1\0\27\10\5\0\4\6\1\0"+
    "\13\6\1\10\7\6\64\10\14\6\2\0\62\10\22\0"+
    "\12\6\12\0\6\6\22\0\6\10\3\6\1\10\1\6"+
    "\2\10\13\0\34\10\10\0\2\6\27\10\15\0\14\6"+
    "\35\10\3\6\4\0\57\10\16\0\16\6\1\10\12\0"+
    "\6\6\5\10\1\0\12\10\12\0\5\10\1\6\51\10"+
    "\16\0\11\6\3\10\1\0\10\10\2\0\2\6\12\0"+
    "\6\6\27\10\3\6\1\10\3\0\62\10\1\0\1\10"+
    "\3\0\2\10\2\0\5\10\2\0\1\10\1\0\1\10"+
    "\30\6\3\10\2\6\13\10\5\0\2\6\3\10\2\0"+
    "\12\6\6\10\2\6\6\10\2\6\6\10\11\6\7\10"+
    "\1\6\7\10\1\6\53\10\1\6\16\10\6\6\163\10"+
    "\10\0\1\6\2\0\2\6\12\0\6\6\244\10\14\6"+
    "\27\10\4\6\61\10\4\6\u0100\71\156\10\2\6\152\10"+
    "\46\6\7\10\14\6\5\10\5\6\1\10\1\0\12\10"+
    "\1\6\15\10\1\6\5\10\1\6\1\10\1\6\2\10"+
    "\1\6\2\10\1\6\154\10\41\6\153\10\22\6\100\10"+
    "\2\6\66\10\50\6\15\10\3\6\20\0\20\6\20\0"+
    "\3\6\2\10\30\6\3\10\31\6\1\10\6\6\5\10"+
    "\1\6\207\10\2\6\1\0\4\6\1\10\13\6\12\0"+
    "\7\6\32\10\4\6\1\10\1\6\32\10\13\6\131\10"+
    "\3\6\6\10\2\6\6\10\2\6\6\10\2\6\3\10"+
    "\3\6\2\10\3\6\2\10\22\6\3\0\4\6\14\10"+
    "\1\6\32\10\1\6\23\10\1\6\2\10\1\6\17\10"+
    "\2\6\16\10\42\6\173\10\105\6\65\10\210\6\1\0"+
    "\202\6\35\10\3\6\61\10\17\6\1\0\37\6\40\10"+
    "\15\6\36\10\5\6\46\10\5\0\5\6\36\10\2\6"+
    "\44\10\4\6\10\10\1\6\5\10\52\6\236\10\2\6"+
    "\12\0\6\6\44\10\4\6\44\10\4\6\50\10\10\6"+
    "\64\10\14\6\13\10\1\6\17\10\1\6\7\10\1\6"+
    "\2\10\1\6\13\10\1\6\17\10\1\6\7\10\1\6"+
    "\2\10\103\6\67\10\11\6\26\10\12\6\10\10\30\6"+
    "\6\10\1\6\52\10\1\6\11\10\105\6\6\10\2\6"+
    "\1\10\1\6\54\10\1\6\2\10\3\6\1\10\2\6"+
    "\27\10\12\6\27\10\11\6\37\10\101\6\23\10\1\6"+
    "\2\10\12\6\26\10\12\6\32\10\106\6\70\10\6\6"+
    "\2\10\100\6\1\10\3\0\1\6\2\0\5\6\4\0"+
    "\4\10\1\6\3\10\1\6\35\10\2\6\3\0\4\6"+
    "\1\0\40\6\35\10\3\6\35\10\43\6\10\10\1\6"+
    "\34\10\2\0\31\6\66\10\12\6\26\10\12\6\23\10"+
    "\15\6\22\10\156\6\111\10\67\6\63\10\15\6\63\10"+
    "\15\6\44\10\4\0\10\6\12\0\u0146\6\52\10\1\6"+
    "\2\0\3\6\2\10\116\6\35\10\12\6\1\10\10\6"+
    "\26\10\13\0\37\6\22\10\4\0\52\6\25\10\33\6"+
    "\27\10\11\6\3\0\65\10\17\0\37\6\13\0\2\10"+
    "\2\0\1\10\11\6\4\0\55\10\13\0\2\6\1\0"+
    "\4\6\1\0\12\6\1\0\2\6\31\10\7\6\12\0"+
    "\6\6\3\0\44\10\16\0\1\6\12\0\4\6\1\10"+
    "\2\0\1\10\10\6\43\10\1\0\2\6\1\10\11\6"+
    "\3\0\60\10\16\0\4\10\4\6\4\0\1\6\14\0"+
    "\1\10\1\6\1\10\43\6\22\10\1\6\31\10\14\0"+
    "\6\6\1\0\101\6\7\10\1\6\1\10\1\6\4\10"+
    "\1\6\17\10\1\6\12\10\7\6\57\10\14\0\5\6"+
    "\12\0\6\6\4\0\1\6\10\10\2\6\2\10\2\6"+
    "\26\10\1\6\7\10\1\6\2\10\1\6\5\10\1\6"+
    "\2\0\1\10\7\0\2\6\2\0\2\6\3\0\2\6"+
    "\1\10\6\6\1\0\5\6\5\10\2\0\2\6\7\0"+
    "\3\6\5\0\213\6\65\10\22\0\4\10\5\6\12\0"+
    "\4\6\1\0\3\10\36\6\60\10\24\0\2\10\1\6"+
    "\1\10\10\6\12\0\246\6\57\10\7\0\2\6\11\0"+
    "\27\6\4\10\2\0\42\6\60\10\21\0\3\6\1\10"+
    "\13\6\12\0\46\6\53\10\15\0\1\10\7\6\12\0"+
    "\66\6\33\10\2\6\17\0\4\6\12\0\6\6\7\10"+
    "\271\6\54\10\17\0\145\6\100\10\12\0\25\6\10\10"+
    "\2\6\1\10\2\6\10\10\1\6\2\10\1\6\30\10"+
    "\6\0\1\6\2\0\2\6\4\0\1\10\1\0\1\10"+
    "\2\0\14\6\12\0\106\6\10\10\2\6\47\10\7\0"+
    "\2\6\7\0\1\10\1\6\1\10\1\0\33\6\1\10"+
    "\12\0\50\10\7\0\1\10\4\0\10\6\1\0\10\6"+
    "\1\10\13\0\56\10\20\0\3\6\1\10\22\6\111\10"+
    "\7\6\11\10\1\6\45\10\10\0\1\6\10\0\1\10"+
    "\17\6\12\0\30\6\36\10\2\6\26\0\1\6\16\0"+
    "\111\6\7\10\1\6\2\10\1\6\46\10\6\0\3\6"+
    "\1\0\1\6\2\0\1\6\7\0\1\10\1\0\10\6"+
    "\12\0\6\6\6\10\1\6\2\10\1\6\40\10\5\0"+
    "\1\6\2\0\1\6\5\0\1\10\7\6\12\0\u0136\6"+
    "\23\10\4\0\271\6\1\10\54\6\4\10\37\6\232\10"+
    "\146\6\157\10\21\6\304\10\u014c\6\141\10\17\6\57\10"+
    "\1\6\11\0\307\6\107\10\271\6\71\10\7\6\37\10"+
    "\1\6\12\0\6\6\117\10\1\6\12\0\6\6\36\10"+
    "\2\6\5\0\13\6\60\10\7\0\11\6\4\10\14\6"+
    "\12\0\11\6\25\10\5\6\23\10\260\6\100\10\200\6"+
    "\113\10\4\6\1\0\1\10\67\0\7\6\4\0\15\10"+
    "\100\6\2\10\1\6\1\10\1\0\13\6\2\0\16\6"+
    "\370\10\10\6\326\10\52\6\11\10\u01e7\6\4\10\1\6"+
    "\7\10\1\6\2\10\1\6\43\10\55\6\3\10\21\6"+
    "\4\10\10\6\u018c\10\4\6\153\10\5\6\15\10\3\6"+
    "\11\10\7\6\12\10\3\6\2\0\1\6\4\0\134\6"+
    "\56\0\2\6\27\0\u011e\6\5\0\3\6\26\0\2\6"+
    "\7\0\36\6\4\0\224\6\3\0\273\6\125\10\1\6"+
    "\107\10\1\6\2\10\2\6\1\10\2\6\2\10\2\6"+
    "\4\10\1\6\14\10\1\6\1\10\1\6\7\10\1\6"+
    "\101\10\1\6\4\10\2\6\10\10\1\6\7\10\1\6"+
    "\34\10\1\6\4\10\1\6\5\10\1\6\1\10\3\6"+
    "\7\10\1\6\u0154\10\2\6\31\10\1\6\31\10\1\6"+
    "\37\10\1\6\31\10\1\6\37\10\1\6\31\10\1\6"+
    "\37\10\1\6\31\10\1\6\37\10\1\6\31\10\1\6"+
    "\10\10\2\6\151\0\4\6\62\0\10\6\1\0\16\6"+
    "\1\0\26\6\5\0\1\6\17\0\120\6\37\10\341\6"+
    "\7\0\1\6\21\0\2\6\7\0\1\6\2\0\1\6"+
    "\5\0\325\6\55\10\3\6\7\0\7\10\2\6\12\0"+
    "\4\6\1\10\u0141\6\36\10\1\0\21\6\54\10\16\0"+
    "\5\6\1\10\340\6\7\10\1\6\4\10\1\6\2\10"+
    "\1\6\17\10\1\6\305\10\13\6\7\0\51\6\104\10"+
    "\7\0\1\10\4\6\12\0\u0156\6\1\10\117\6\4\10"+
    "\1\6\33\10\1\6\2\10\1\6\1\10\2\6\1\10"+
    "\1\6\12\10\1\6\4\10\1\6\1\10\1\6\1\10"+
    "\6\6\1\10\4\6\1\10\1\6\1\10\1\6\1\10"+
    "\1\6\3\10\1\6\2\10\1\6\1\10\2\6\1\10"+
    "\1\6\1\10\1\6\1\10\1\6\1\10\1\6\1\10"+
    "\1\6\2\10\1\6\1\10\2\6\4\10\1\6\7\10"+
    "\1\6\4\10\1\6\4\10\1\6\1\10\1\6\12\10"+
    "\1\6\21\10\5\6\3\10\1\6\5\10\1\6\21\10"+
    "\u0134\6\12\0\6\6\340\10\40\6\71\10\7\6\336\10"+
    "\2\6\u0182\10\16\6\u0131\10\37\6\36\10\342\6\113\10"+
    "\266\6\1\0\36\6\140\0\200\6\360\0\20\6";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[32512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\12\1\13\1\14\12\3"+
    "\1\15\1\16\1\17\1\20\1\21\1\0\1\22\1\23"+
    "\1\0\1\24\14\3\1\0\2\24\2\3\1\10\12\3"+
    "\1\25\15\3\1\26\1\27\2\3\1\7\1\3\1\30"+
    "\4\3\1\31\6\3\1\13\2\3\1\21\1\3\1\32"+
    "\1\33\14\3\1\34\1\35\5\3\1\36\1\3\1\37"+
    "\12\3\1\40\4\3\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\72\0\164\0\256\0\72\0\72\0\72"+
    "\0\350\0\72\0\u0122\0\72\0\72\0\72\0\72\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\72\0\72\0\72\0\72\0\72\0\164\0\72"+
    "\0\72\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc"+
    "\0\72\0\u0706\0\u0740\0\u077a\0\256\0\u07b4\0\u07ee\0\u0828"+
    "\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\72"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\256\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\256\0\u0d98\0\256\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\256\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\256"+
    "\0\u1016\0\u1050\0\256\0\u108a\0\256\0\256\0\u10c4\0\u10fe"+
    "\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce"+
    "\0\u1308\0\u1342\0\256\0\256\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\256\0\u149e\0\256\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\256\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\256";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\2\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\2\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\5\1\27\1\30\1\31\1\32\1\33\24\5"+
    "\1\34\1\35\1\2\1\36\1\2\72\0\7\37\1\40"+
    "\62\37\1\5\7\0\1\5\13\0\13\5\2\0\24\5"+
    "\2\0\1\5\25\0\1\41\61\0\1\42\2\0\1\43"+
    "\53\0\1\5\7\0\1\5\13\0\13\5\2\0\6\5"+
    "\1\44\15\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\7\5\1\45\14\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\15\5"+
    "\1\46\6\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\22\5\1\47\1\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\15\5"+
    "\1\50\6\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\14\5\1\51\7\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\10\5"+
    "\1\52\13\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\1\53\17\5\1\54\3\5\2\0"+
    "\1\5\2\0\1\5\7\0\1\5\13\0\13\5\2\0"+
    "\10\5\1\55\5\5\1\56\5\5\2\0\1\5\2\0"+
    "\1\5\7\0\1\5\13\0\13\5\2\0\1\57\23\5"+
    "\2\0\1\5\2\0\13\42\1\60\56\42\2\43\3\61"+
    "\1\62\61\43\1\61\1\43\1\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\4\5\1\63\17\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\4\5"+
    "\1\64\17\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\20\5\1\65\3\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\4\5"+
    "\1\66\17\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\16\5\1\67\5\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\10\5"+
    "\1\70\13\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\14\5\1\71\7\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\20\5"+
    "\1\72\3\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\1\73\23\5\2\0\1\5\2\0"+
    "\1\5\7\0\1\5\13\0\13\5\2\0\13\5\1\74"+
    "\10\5\2\0\1\5\2\0\1\5\7\0\1\5\13\0"+
    "\13\5\2\0\1\75\20\5\1\76\2\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\12\5"+
    "\1\77\11\5\2\0\1\5\2\0\13\42\1\60\2\42"+
    "\1\100\53\42\2\0\1\61\67\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\14\5\1\101\7\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\2\5"+
    "\1\102\21\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\14\5\1\103\7\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\13\5"+
    "\1\104\10\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\20\5\1\105\3\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\21\5"+
    "\1\106\2\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\10\5\1\107\13\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\20\5"+
    "\1\110\3\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\4\5\1\111\17\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\14\5"+
    "\1\112\7\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\17\5\1\113\4\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\10\5"+
    "\1\114\13\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\20\5\1\115\3\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\11\5"+
    "\1\116\12\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\20\5\1\117\3\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\21\5"+
    "\1\120\2\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\10\5\1\121\13\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\17\5"+
    "\1\122\4\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\17\5\1\123\4\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\4\5"+
    "\1\124\17\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\7\5\1\125\3\5\2\0\12\5\1\126\11\5"+
    "\2\0\1\5\2\0\1\5\7\0\1\5\13\0\13\5"+
    "\2\0\17\5\1\127\4\5\2\0\1\5\2\0\1\5"+
    "\7\0\1\5\13\0\13\5\2\0\20\5\1\130\3\5"+
    "\2\0\1\5\2\0\1\5\7\0\1\5\13\0\13\5"+
    "\2\0\3\5\1\131\20\5\2\0\1\5\2\0\1\5"+
    "\7\0\1\5\13\0\13\5\2\0\12\5\1\132\11\5"+
    "\2\0\1\5\2\0\1\5\7\0\1\5\13\0\11\5"+
    "\1\133\1\5\2\0\24\5\2\0\1\5\2\0\1\5"+
    "\7\0\1\5\13\0\13\5\2\0\12\5\1\134\11\5"+
    "\2\0\1\5\2\0\1\5\7\0\1\5\13\0\13\5"+
    "\2\0\1\135\23\5\2\0\1\5\2\0\1\5\7\0"+
    "\1\5\13\0\13\5\2\0\5\5\1\136\16\5\2\0"+
    "\1\5\2\0\1\5\7\0\1\5\13\0\13\5\2\0"+
    "\16\5\1\137\5\5\2\0\1\5\2\0\1\5\7\0"+
    "\1\5\13\0\13\5\2\0\20\5\1\140\3\5\2\0"+
    "\1\5\2\0\1\5\7\0\1\5\13\0\13\5\2\0"+
    "\10\5\1\141\13\5\2\0\1\5\2\0\1\5\7\0"+
    "\1\5\13\0\7\5\1\142\3\5\2\0\24\5\2\0"+
    "\1\5\2\0\1\5\7\0\1\5\13\0\13\5\2\0"+
    "\20\5\1\143\3\5\2\0\1\5\2\0\1\5\7\0"+
    "\1\5\13\0\13\5\2\0\16\5\1\144\5\5\2\0"+
    "\1\5\2\0\1\5\7\0\1\5\13\0\13\5\2\0"+
    "\1\145\23\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\12\5\1\146\11\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\10\5"+
    "\1\147\13\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\3\5\1\150\20\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\20\5"+
    "\1\151\3\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\16\5\1\152\5\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\1\153"+
    "\23\5\2\0\1\5\2\0\1\5\7\0\1\5\13\0"+
    "\13\5\2\0\1\154\3\5\1\155\17\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\4\5"+
    "\1\156\17\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\10\5\1\157\13\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\3\5"+
    "\1\160\20\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\14\5\1\161\7\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\1\5"+
    "\1\162\22\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\17\5\1\163\4\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\16\5"+
    "\1\164\5\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\15\5\1\165\6\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\4\5"+
    "\1\166\17\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\17\5\1\167\4\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\12\5"+
    "\1\170\11\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\14\5\1\171\7\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\16\5"+
    "\1\172\5\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\10\5\1\173\13\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\4\5"+
    "\1\174\17\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\10\5\1\175\2\5\2\0\24\5\2\0\1\5"+
    "\2\0\1\5\7\0\1\5\13\0\13\5\2\0\20\5"+
    "\1\176\3\5\2\0\1\5\2\0\1\5\7\0\1\5"+
    "\13\0\13\5\2\0\23\5\1\177\2\0\1\5\2\0"+
    "\1\5\7\0\1\5\13\0\13\5\2\0\10\5\1\200"+
    "\13\5\2\0\1\5\2\0\1\5\7\0\1\5\13\0"+
    "\13\5\2\0\17\5\1\201\4\5\2\0\1\5\2\0"+
    "\1\5\7\0\1\5\13\0\13\5\2\0\15\5\1\202"+
    "\6\5\2\0\1\5\2\0\1\5\7\0\1\5\13\0"+
    "\13\5\2\0\20\5\1\203\3\5\2\0\1\5\2\0"+
    "\1\5\7\0\1\5\13\0\13\5\2\0\14\5\1\204"+
    "\7\5\2\0\1\5\2\0\1\5\7\0\1\5\13\0"+
    "\13\5\2\0\4\5\1\205\17\5\2\0\1\5\2\0"+
    "\1\5\7\0\1\5\13\0\10\5\1\206\2\5\2\0"+
    "\24\5\2\0\1\5\2\0\1\5\7\0\1\5\13\0"+
    "\13\5\2\0\13\5\1\207\10\5\2\0\1\5\2\0"+
    "\1\5\7\0\1\5\13\0\13\5\2\0\23\5\1\210"+
    "\2\0\1\5\2\0\1\5\7\0\1\5\13\0\13\5"+
    "\2\0\17\5\1\211\4\5\2\0\1\5\2\0\1\5"+
    "\7\0\1\5\13\0\13\5\2\0\20\5\1\212\3\5"+
    "\2\0\1\5\2\0\1\5\7\0\1\5\13\0\13\5"+
    "\2\0\4\5\1\213\17\5\2\0\1\5\2\0\1\5"+
    "\7\0\1\5\13\0\13\5\2\0\13\5\1\214\10\5"+
    "\2\0\1\5\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6148];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\3\11\1\1\1\11\1\1\4\11"+
    "\12\1\5\11\1\0\2\11\1\0\15\1\1\0\1\11"+
    "\16\1\1\11\114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[140];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  void print(String s){
  	System.out.println(s);
  }
  
  private Symbol sym(int sym) {
    return new Symbol(sym);
  }

  private Symbol sym(int sym, Object val) {
    return new Symbol(sym, val);
  }
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TSScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Lexical error: " + yytext());
            }
          // fall through
          case 34: break;
          case 2:
            { /*ignore*/
            }
          // fall through
          case 35: break;
          case 3:
            { return sym(sym.tIDENTIFIER, yytext());
            }
          // fall through
          case 36: break;
          case 4:
            { return sym(sym.tLPAREN);
            }
          // fall through
          case 37: break;
          case 5:
            { return sym(sym.tRPAREN);
            }
          // fall through
          case 38: break;
          case 6:
            { return sym(sym.tPRODUCT);
            }
          // fall through
          case 39: break;
          case 7:
            { return sym(sym.tMINUS);
            }
          // fall through
          case 40: break;
          case 8:
            { return sym(sym.tDOT);
            }
          // fall through
          case 41: break;
          case 9:
            { return sym(sym.tCOLON);
            }
          // fall through
          case 42: break;
          case 10:
            { return sym(sym.tSEMICOLON);
            }
          // fall through
          case 43: break;
          case 11:
            { return sym(sym.tLT);
            }
          // fall through
          case 44: break;
          case 12:
            { return sym(sym.tEQ);
            }
          // fall through
          case 45: break;
          case 13:
            { return sym(sym.tLBRACK);
            }
          // fall through
          case 46: break;
          case 14:
            { return sym(sym.tRBRACK);
            }
          // fall through
          case 47: break;
          case 15:
            { return sym(sym.tLCURLY);
            }
          // fall through
          case 48: break;
          case 16:
            { return sym(sym.tRCURLY);
            }
          // fall through
          case 49: break;
          case 17:
            { return sym(sym.tAGENTLT);
            }
          // fall through
          case 50: break;
          case 18:
            { return sym(sym.tFORMULALITERAL, yytext().substring(1, yytext().length() - 1));
            }
          // fall through
          case 51: break;
          case 19:
            { return sym(sym.tARROW);
            }
          // fall through
          case 52: break;
          case 20:
            { /*ignore there is a ? because EOF is not end of line*/
            }
          // fall through
          case 53: break;
          case 21:
            { /*ignore. Note: comments don't nest*/
            }
          // fall through
          case 54: break;
          case 22:
            { return sym(sym.tCHECK);
            }
          // fall through
          case 55: break;
          case 23:
            { return sym(sym.tEVENT);
            }
          // fall through
          case 56: break;
          case 24:
            { return sym(sym.tSTATE);
            }
          // fall through
          case 57: break;
          case 25:
            { return sym(sym.tVALID);
            }
          // fall through
          case 58: break;
          case 26:
            { return sym(sym.tFORMULA);
            }
          // fall through
          case 59: break;
          case 27:
            { return sym(sym.tINITIAL);
            }
          // fall through
          case 60: break;
          case 28:
            { return sym(sym.tSATISFIES);
            }
          // fall through
          case 61: break;
          case 29:
            { return sym(sym.tTIMEORDER);
            }
          // fall through
          case 62: break;
          case 30:
            { return sym(sym.tTRUSTORDER);
            }
          // fall through
          case 63: break;
          case 31:
            { return sym(sym.tSATISFIABLE);
            }
          // fall through
          case 64: break;
          case 32:
            { return sym(sym.tTRANSITIONSYSTEM);
            }
          // fall through
          case 65: break;
          case 33:
            { return sym(sym.tACTIONTRANSITIONSYSTEM); /* I admit, this is not very elegant*/
            }
          // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
